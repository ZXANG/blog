<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安静-不安静的博客</title>
  
  <link href="https:///AnJingwd.github.io/atom.xml" rel="self"/>
  
  <link href="https:///AnJingwd.github.io/"/>
  <updated>2019-06-17T12:14:05.930Z</updated>
  <id>https:///AnJingwd.github.io/</id>
  
  <author>
    <name>AJ&#39;s blog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>来自kaggle文本分类银奖得主的参赛感悟</title>
    <link href="https:///AnJingwd.github.io/2019/06/17/kaggler%20NLP%E7%AC%AC%E4%BA%8C%E5%90%8D%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    <id>https:///AnJingwd.github.io/2019/06/17/kaggler NLP第二名经验分享/</id>
    <published>2019-06-17T02:57:31.000Z</published>
    <updated>2019-06-17T12:14:05.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">翻译了一篇kaggler银奖得主的赛后经验博客，技巧与干货满满</blockquote>

<a id="more"></a>
<p>Kaggle是一个学习的好地方。我从最近结束的关于<strong>Quora Insincere问题分类</strong>的比赛中学到了很多东西，其中我的排名为<strong>182/4037 </strong>。在这篇文章中，我将尝试提供我尝试过的事情的摘要。我还将尝试总结我错过的想法，但这些想法是其他获奖解决方案的一部分。</p>
<p>​     所以对于那些没有这次比赛经验的人，首先要简要介绍一下这次比赛。在本次比赛中，我们必须开发能够识别和标记虚假问题的模型。 <strong>挑战不仅仅是对性能的测试，而且还是对高效代码编写技能的测试。</strong>由于这是一个有限的外部数据选项kerner的竞争，竞争者仅限于使用竞赛组织者提供的词嵌入。这意味着我们不允许使用像BERT这样最先进的模型。我们的所有模型都应在2小时内运行完，因此我们也受到限制。所以说模型的堆叠融合是不可能的。虽然有些解决方案能够通过使代码超高效来实现这一点，稍后会详细介绍。</p>
<hr>
<h2 id="一些kaggle经验"><a href="#一些kaggle经验" class="headerlink" title="一些kaggle经验"></a>一些kaggle经验</h2><p>在进入我的最终解决方案之前，我想分享一些关于kaggle作为一个整体<strong>的</strong>学习内容：</p>
<h3 id="1-一直相信你的CV-Cross-Validation-结果"><a href="#1-一直相信你的CV-Cross-Validation-结果" class="headerlink" title="1. 一直相信你的CV(Cross Validation)结果"></a>1. 一直相信你的CV(Cross Validation)结果</h3><p><img src="https://mlwhiz.com/images/silver/CV_vs_LB.png" alt="img"></p>
<p>在这次比赛中真正令很多人感到困惑的事情之一是，良好的CV分数并不一定能很好地转化为良好的LB分数。其主要原因是第一阶段的<strong>小测试数据集</strong>（仅65k行）（约占总测试数据的15％）。</p>
<p>讨论论坛上的一个共同主题是关注我们应该选择哪些提交作为最终提交的内容：</p>
<ul>
<li>拥有最佳本地CV的人？要么</li>
<li>最好的LB？</li>
</ul>
<p>虽然说信任你的CV似乎很简单，但当你看到你的本地CV得分增加时，你的LB分数下降或保持不变时，常识就会折腾你。</p>
<p>幸运的是，我最终没有犯错，不相信我的CV得分。由于在Kaggle讨论板上有很多优秀的帖子，<strong>我选择了一个内核，公共LB得分为0.697，本地CV为0.701，截至最终提交时，公共LB的排名大约为1200。它的得分为0.702，在私人LB上排名第182位。</strong></p>
<p>虽然这似乎是一个事后直截了当的选择，但是当你拥有公共LB得分&gt; = 0.70的公共内核时，这是一个艰难的决定。</p>
<ol>
<li><p>Kaggle的CV策略是指使用train-validation split来复制 train-test split ，以便在你的本地CV上表现良好的模型在私人LB上也表现良好。</p>
</li>
<li><p>CV表示交叉验证。这是验证集中的分数。在竞赛中，LB通常仅计算20-30％的测试数据。每天你提交以获得LB的高分，即使你的CV并不好。LB.的模型其实过拟合了20-30％。对于任何竞赛，最终你需要选择最后的2个模型提交。策略总是选择一个最高的CV和一个最高的LB的</p>
</li>
<li><p>CV strategy取决于大数据的大小，我们决定是否实施K-fold。有了K-fold，我们需要大量时间来训练。对于一个小数据集，如<a href="https://www.kaggle.com/c/home-credit-default-risk" target="_blank" rel="external">https://www.kaggle.com/c/home-credit-default-risk</a>，人们使用K-fold。对于非常大的数据集，比如<a href="https://www.kaggle.com/c/talkingdata-adtracking-fraud-detection" target="_blank" rel="external">https://www.kaggle.com/c/talkingdata-adtracking-fraud-detection</a>，就不可能使用K-fold。</p>
</li>
</ol>
<p>关于 CV strategy 可以查看这个讨论<a href="https://www.kaggle.com/questions-and-answers/61785" target="_blank" rel="external">link</a></p>
<hr>
<h3 id="2-可以使用公开kernel的代码但检查错误"><a href="#2-可以使用公开kernel的代码但检查错误" class="headerlink" title="2.可以使用公开kernel的代码但检查错误"></a>2.可以使用公开kernel的代码但检查错误</h3><p>​          <a href="https://www.kaggle.com/bminixhofer/deterministic-neural-networks-using-pytorch" target="_blank" rel="external">This</a> Benjamin Minixhofer的Pytorch内核非常棒。它成为我参加本次比赛的许多参赛作品的基础。但是这个kernel有一个错误。它没有以正确的方式实现spatial dropout。你可以在我的帖子<a href="https://mlwhiz.com/blog/2019/01/06/pytorch_keras_conversion/" target="_blank" rel="external">这里</a>或我的<a href="https://www.kaggle" target="_blank" rel="external">kernel</a>上找到正确的spatial dropout实现。以正确的方式实施spatial dropout，使本地CV增加了约0.004。</p>
<p>尽管如此，我还是使用了这个kernel来学习pytorch，同样感谢他。</p>
<h3 id="3-不要相信论坛上的一切"><a href="#3-不要相信论坛上的一切" class="headerlink" title="3.不要相信论坛上的一切"></a>3.不要相信论坛上的一切</h3><p><img src="https://mlwhiz.com/images/silver/read-what-the-smart-people-are-saying.png" alt="img"></p>
<p>我将在这里讨论两件事：</p>
<ul>
<li><strong>随机种子调整</strong>（<strong>Seed tuning</strong>）：在比赛期间，每个人都试图在公共LB上获得最佳排名。这只是人性。很多讨论围绕着神经网络初始化的好种子和坏种子。虽然在第一次看起来似乎没什么问题，但是谈话进一步发展，<strong>人们开始在内核中调整种子作为超级参数</strong>。一些讨论甚至继续说这是一个有效的策略。而这导致公开排行榜上出现大量过拟合的现象。同样的提交只要通过改变种子就可使得分从0.699提升到0.704。这意味着只通过更改public kernel中的种子，你就能从400-500名前进到前50名。这是灾难性的。有些人这样做了。他们上了public LB，但在私有排行榜上惨败了。</li>
<li><strong>讨论论坛上的CV得分披露</strong>：我们总是试图衡量我们对其他人的表现。在很多讨论中，人们提供了他们的CV分数和相应的public LB分数。由于不同的CV schemes，CV中没有folds，只报告Metric，过拟合, 或错误的交叉验证，所以<strong>得分分散并且没有可比性</strong>。但他们最终影响了很多初学者和新人。</li>
</ul>
<h3 id="4-请在讨论论坛上保持活跃并定期检查公共内核"><a href="#4-请在讨论论坛上保持活跃并定期检查公共内核" class="headerlink" title="4. 请在讨论论坛上保持活跃并定期检查公共内核"></a>4. 请在讨论论坛上保持活跃并定期检查公共内核</h3><p>​            你可以通过参与讨论论坛和学习公共内核来学习很多东西。 <a href="https://www.kaggle.com/sudalairajkumar/a-look-at-different-embeddings" target="_blank" rel="external">SRK</a>，<a href="https://www.kaggle.com/shujian/mix-of-nn-models-based-on-meta-embedding" target="_blank" rel="external">Shujian的模型</a>有很多关于嵌入的优秀公共内核。以及<a href="https://www.kaggle.com/theoviel/improve-your-score- with-text-preprocessing-v2" target="_blank" rel="external">Theo Viel</a>的预处理让每个人都有了一个开端。随着比赛的进行，讨论也在不断发展。有关加快代码，工作方法，F1阈值和其他激动人心的话题的讨论使我对新的想法和改进充满了兴趣。</p>
<p>即使在结束之后，在阅读关于解决方案概述的讨论时，我也学到了很多东西。我会说，<strong>查看获奖解决方案非常重要</strong>。</p>
<h3 id="5-Share-a-lot"><a href="#5-Share-a-lot" class="headerlink" title="5. Share a lot"></a>5. Share a lot</h3><p>分享是Kaggle的一切。人们在比赛期间以及比赛结束后分享了他们的代码和想法。我们可以共同进步。</p>
<h3 id="6-Beware-of-trolls"><a href="#6-Beware-of-trolls" class="headerlink" title="6. Beware of trolls :)"></a>6. Beware of trolls :)</h3><p>​            离比赛还剩下两个星期，我们正在快乐地走向比赛的最后阶段。分数增长缓慢。顶级选手有些停滞不前。 <strong>然后Pavel和团队的公共LB得分为0.782。</strong>下一组的LB得分为0.713。如此巨大的差异。我非常确定数据中有一些漏洞，除了Pavel之外没有人抓到。我花了差不多半天时间再做EDA。</p>
<p>最后，事实证明他们所做的是<a href="https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/80665" target="_blank" rel="external">scraping</a> - 很好玩！</p>
<p>他们还有一些非常棒的想法，包括额外的数据，这可能有效，但在本次比赛中没有尝试。</p>
<hr>
<h2 id="My-Final-Solution"><a href="#My-Final-Solution" class="headerlink" title="My Final Solution:"></a>My Final Solution:</h2><p><img src="https://mlwhiz.com/images/silver/lb2.png" alt="img"></p>
<p>我主要关注<strong>元特征工程(meta-feature engineering)和增加嵌入覆盖率和质量</strong>。这意味着我在各种神经网络架构上的尝试并不多。以下是我在最终提交中包含的内容：</p>
<ul>
<li>我注意到Glove嵌入在本地CV中表现不错，但在LB上却没有，而meta嵌入（Glove和paragram的意思）在LB上表现不错，但在CV上表现不佳。我采取了一种混合方法，所以<strong>我的一些模型仅使用Glove嵌入进行训练，有些则采用元嵌入</strong>。</li>
<li><strong>嵌入</strong>中还包含自己提取的四个额外的特征(features)。因此，我的嵌入是一个304维向量。<strong>四个特征分别是:  标题，大写标志，Textblob字极性，textblob字主观性（title case flag, uppercase flag, Textblob word polarity, textblob word subjectivity）</strong></li>
<li>使用spacy从整个训练集和测试数据中找出<strong>NER tokens </strong>，并将tokens和实体(entities)保存在一个字典中。我用这个词典来创建额外的特征(features)，比如“GPE”，“PERSON”，“ORG”，“NORP”，“WORK_OF_ART”。增加了一些特征并与目标高度相关。</li>
<li>我使用的其他功能包括<code>total_length</code>，<code>capitals</code>，<code>words_vs_unique</code>以及一些工程特征，如<code>sum_feat</code>（咒骂的总和），<code>question_start_with_why</code>，<code>question_start_with_how_or_what</code>，<code>question_start_with_do_or_are</code>。可能没有增加太多价值，但仍然保留它们。</li>
<li>我的最终解决方案是<strong>四个模型以stacked方式进行融合 </strong>。我使用Logistic回归（具有正权重和0截距），并将权重作为最终kernel中的列表给出。</li>
</ul>
<p>您可以找到我最终提交的内核<a href="https://www.kaggle.com/mlwhiz/multimodel-ensemble-clean-kernel?scriptVersionId=10279838" target="_blank" rel="external">此处</a>。</p>
<hr>
<h2 id="其他解决方案中使用的提示和技巧："><a href="#其他解决方案中使用的提示和技巧：" class="headerlink" title="其他解决方案中使用的提示和技巧："></a>其他解决方案中使用的提示和技巧：</h2><h3 id="1-增加嵌入覆盖范围："><a href="#1-增加嵌入覆盖范围：" class="headerlink" title="1. 增加嵌入覆盖范围："></a>1. 增加嵌入覆盖范围：</h3><p>在第三名<a href="https://www.kaggle.com/wowfattie/3rd-place" target="_blank" rel="external">kaggler的解决方案</a>中，wowfattie使用词干，词形还原，首字母大写，小写，大写，以及为其词典中的每个单词，使用拼写检查器对最近的单词进行词嵌入（ uses stemming, lemmatization, capitalize, lower, uppercase, as well as embedding of the nearest word using a spell checker to get embeddings for all words in his vocab）。这么棒的主意。 <strong>我最喜欢这个解决方案，因为它可以做我想做的事情并在一个非常好的地方完成。</strong>此外，代码非常干净。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> PorterStemmer</div><div class="line">ps = PorterStemmer()</div><div class="line"><span class="keyword">from</span> nltk.stem.lancaster <span class="keyword">import</span> LancasterStemmer</div><div class="line">lc = LancasterStemmer()</div><div class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> SnowballStemmer</div><div class="line">sb = SnowballStemmer(<span class="string">"english"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_glove</span><span class="params">(word_dict, lemma_dict)</span>:</span></div><div class="line">    EMBEDDING_FILE = <span class="string">'../input/embeddings/glove.840B.300d/glove.840B.300d.txt'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_coefs</span><span class="params">(word,*arr)</span>:</span> <span class="keyword">return</span> word, np.asarray(arr, dtype=<span class="string">'float32'</span>)</div><div class="line">    embeddings_index = dict(get_coefs(*o.split(<span class="string">" "</span>)) <span class="keyword">for</span> o <span class="keyword">in</span> open(EMBEDDING_FILE))</div><div class="line">    embed_size = <span class="number">300</span></div><div class="line">    nb_words = len(word_dict)+<span class="number">1</span></div><div class="line">    embedding_matrix = np.zeros((nb_words, embed_size), dtype=np.float32)</div><div class="line">    unknown_vector = np.zeros((embed_size,), dtype=np.float32) - <span class="number">1.</span></div><div class="line">    print(unknown_vector[:<span class="number">5</span>])</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> tqdm(word_dict):</div><div class="line">        word = key</div><div class="line">        embedding_vector = embeddings_index.get(word)</div><div class="line">        <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            embedding_matrix[word_dict[key]] = embedding_vector</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        word = key.lower()</div><div class="line">        embedding_vector = embeddings_index.get(word)</div><div class="line">        <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            embedding_matrix[word_dict[key]] = embedding_vector</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        word = key.upper()</div><div class="line">        embedding_vector = embeddings_index.get(word)</div><div class="line">        <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            embedding_matrix[word_dict[key]] = embedding_vector</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        word = key.capitalize()</div><div class="line">        embedding_vector = embeddings_index.get(word)</div><div class="line">        <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            embedding_matrix[word_dict[key]] = embedding_vector</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        word = ps.stem(key)</div><div class="line">        embedding_vector = embeddings_index.get(word)</div><div class="line">        <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            embedding_matrix[word_dict[key]] = embedding_vector</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        word = lc.stem(key)</div><div class="line">        embedding_vector = embeddings_index.get(word)</div><div class="line">        <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            embedding_matrix[word_dict[key]] = embedding_vector</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        word = sb.stem(key)</div><div class="line">        embedding_vector = embeddings_index.get(word)</div><div class="line">        <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            embedding_matrix[word_dict[key]] = embedding_vector</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        word = lemma_dict[key]</div><div class="line">        embedding_vector = embeddings_index.get(word)</div><div class="line">        <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            embedding_matrix[word_dict[key]] = embedding_vector</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">if</span> len(key) &gt; <span class="number">1</span>:</div><div class="line">            word = correction(key)</div><div class="line">            embedding_vector = embeddings_index.get(word)</div><div class="line">            <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                embedding_matrix[word_dict[key]] = embedding_vector</div><div class="line">                <span class="keyword">continue</span></div><div class="line">        embedding_matrix[word_dict[key]] = unknown_vector                    </div><div class="line">    <span class="keyword">return</span> embedding_matrix, nb_words</div></pre></td></tr></table></figure>
<h3 id="2-Checkpoint-Ensembling"><a href="#2-Checkpoint-Ensembling" class="headerlink" title="2. Checkpoint Ensembling:"></a>2. Checkpoint Ensembling:</h3><p>​       免费获得很多模型。大多数获胜解决方案都使用了对一些模型版本的checkpoint 集成的策略。对于第三名解决方案，预测使用了第4个epoch后的预测和第5个epoch后的预测的加权平均值。我有这个想法，但忘了在我的基于kernel的 ensemble中实现并提交它。</p>
<h3 id="3-Meta-Embeddings"><a href="#3-Meta-Embeddings" class="headerlink" title="3. Meta Embeddings:"></a>3. Meta Embeddings:</h3><p>许多获胜的解决方案最终使用了<strong>加权元嵌入(weighted meta embeddings)</strong>，它们为Glove嵌入提供了更高的权重。一些解决方案也使用了<strong>连接嵌入(concatenated embeddings)</strong>。</p>
<h3 id="4-Model-Architecture"><a href="#4-Model-Architecture" class="headerlink" title="4. Model Architecture:"></a>4. Model Architecture:</h3><p>我看到人们做的一件令人惊讶的事情是在双向层<strong>之后使用</strong> 1Dconv层。例如，这是第一名比赛团队使用的网络<a href="https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/80568" target="_blank" rel="external">架构</a>。</p>
<p><img src="https://mlwhiz.com/images/silver/arch_1_place.png" alt="img"></p>
<h3 id="5-Bucketing-Variable-Sequence-Length-and-increased-hidden-units"><a href="#5-Bucketing-Variable-Sequence-Length-and-increased-hidden-units" class="headerlink" title="5. Bucketing/Variable Sequence Length and increased hidden units:"></a>5. Bucketing/Variable Sequence Length and increased hidden units:</h3><p>​       我注意到的另一件事是与许多公共kernel相比，隐藏单元的数量增加了。由于时间限制，大多数公共kernel使用60个隐藏单元。我使用80个隐藏单元，但代价是少训练一个网络。由于<strong>序列长度可变或者bucketing的思想</strong>，许多高分kernel能够使用更多数量的隐藏单元。从第1名kernel开始讨论：</p>
<blockquote>
<ul>
<li><p>我们不会根据整个数据将序列填充到相同的长度，而只是在批处理级别上。这意味着我们在数据生成器级别为每个批次分别进行<strong>填充和截断</strong>，这样批量中句子的长度可以在大小上变化。</p>
</li>
<li><p>另外，我们通过不基于批次中最长序列的长度截短，但基于序列内95％百分比的长度进一步改进了这一点。这大大改善了运行时间，并且在单个模型级别上保持了非常强大的准确性，并通过更多模型平均的方法来改进它。</p>
</li>
</ul>
<p>We do not pad sequences to the same length based on the whole data, but just on a batch level. That means we conduct <strong>padding and truncation on the data generator level for each batch separately</strong>, so that length of the sentences in a batch can vary in size. Additionally, we further improved this by not truncating based on the length of the longest sequence in the batch but based on the 95% percentile of lengths within the sequence. This improved runtime heavily and kept accuracy quite robust on single model level, and improved it by being able to average more models.</p>
</blockquote>
<p>也来自第7位<a href="https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/80561" target="_blank" rel="external">讨论</a>：</p>
<blockquote>
<p>Bucketing是从具有相似长度的实例(instances)组成小批量来减轻padding成本。这使得训练速度提高了3倍以上，因此我可以为each split of 5-fold运行9个epochs。</p>
<p>Bucketing is to make a minibatch from instances that have similar lengths to alleviate the cost of padding. This makes the training speed more than 3x faster, and thus I can run 9 epochs for each split of 5-fold.</p>
</blockquote>
<p>因此，使用这种技术还允许一些参赛者在更短的时间跑更多 epochs，并同时尝试更多的模型。很简约！</p>
<h3 id="6-For-those-winners-who-didn’t-use-bucketing-Maxlen-72-was-too-large"><a href="#6-For-those-winners-who-didn’t-use-bucketing-Maxlen-72-was-too-large" class="headerlink" title="6. For those winners who didn’t use bucketing, Maxlen = 72 was too large:"></a>6. For those winners who didn’t use bucketing, Maxlen = 72 was too large:</h3><p>​      我们大多数人都看到了question length的分布，并将完全覆盖最大question长度作为maxlen参数。我从来没有试过调整它，但它似乎可以调整。 <strong>其中一个技巧是使用范围从35到60的maxlen。</strong>这使得kernel运行速度更快。</p>
<h3 id="7-Time-taking-models-complex-architectures-like-Capsule-were-mostly-not-used"><a href="#7-Time-taking-models-complex-architectures-like-Capsule-were-mostly-not-used" class="headerlink" title="7. Time taking models/complex architectures like Capsule were mostly not used:"></a>7. Time taking models/complex architectures like Capsule were mostly not used:</h3><p>​      大多数获胜解决方案都没有使用Capsule网络，因为他们需要很多时间来训练。</p>
<h3 id="8-Backprop-errors-on-embeddings-weights-in-last-few-epochs"><a href="#8-Backprop-errors-on-embeddings-weights-in-last-few-epochs" class="headerlink" title="8. Backprop errors on embeddings weights in last few epochs:"></a>8. Backprop errors on embeddings weights in last few epochs:</h3><p>我看到的另一件事是在排名<a href="https://www.kaggle.com/kentaronakanishi/18th-place-solution" target="_blank" rel="external">第18位kernel</a>使用单一模型</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> epoch &gt;= <span class="number">3</span>:</div><div class="line">    model.embedding.embeddings.weight.requires_grad = <span class="keyword">True</span></div></pre></td></tr></table></figure>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion:"></a>Conclusion:</h2><p>​       这是一场长达2个月比赛，在此期间我学到了很多关于Text和NLP的知识。我想在此强调的是<strong>我最终尝试了很多在达到最终解决方案之前无效的事情</strong>。有时候有点令人沮丧，但最后，我很高兴得到了最好的数据科学实践。还要感谢Kaggle大师Kazanova和他的一些朋友一起发布了<a href="https://www.coursera.org/specializations/aml?siteID=lVarvwc5BD0-BShznKdc3CUauhfsM7_8xw&amp;utm_content=2&amp;utm_medium = partners＆utm_source = linkshare＆utm_campaign = lVarvwc5BD0" target="_blank" rel="external">“如何赢得数据科学竞赛”</a>Coursera课程。我从这门课程中学到了很多东西。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>原文 <a href="https://www.kdnuggets.com/2019/05/silver-medal-text-classification-kaggle.html" target="_blank" rel="external">What my first Silver Medal taught me about Text Classification and Kaggle in general?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;翻译了一篇kaggler银奖得主的赛后经验博客，技巧与干货满满&lt;/blockquote&gt;
    
    </summary>
    
      <category term="kaggle" scheme="https:///AnJingwd.github.io/categories/kaggle/"/>
    
    
      <category term="kaggle" scheme="https:///AnJingwd.github.io/tags/kaggle/"/>
    
  </entry>
  
  <entry>
    <title>pytorch入门教程</title>
    <link href="https:///AnJingwd.github.io/2019/06/10/pytorch%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https:///AnJingwd.github.io/2019/06/10/pytorch入门教程/</id>
    <published>2019-06-10T02:57:31.000Z</published>
    <updated>2019-06-17T07:47:28.759Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">与numpy对比，较少pytorch的基本操作，然后搭建一个简单堆叠式的人工神经网络</blockquote>

<a id="more"></a>
<p>##　１.数据表示及运算</p>
<h3 id="1-0-Numpy与pytorch比较"><a href="#1-0-Numpy与pytorch比较" class="headerlink" title="1.0 Numpy与pytorch比较"></a>1.0 Numpy与pytorch比较</h3><table>
<thead>
<tr>
<th></th>
<th>Numpy</th>
<th>Pytorch</th>
</tr>
</thead>
<tbody>
<tr>
<td>导入模块</td>
<td>import numpy as np</td>
<td>import torch</td>
</tr>
<tr>
<td>创建数据</td>
<td>np.numpy()</td>
<td>tensor = torch.Tensor(array)</td>
</tr>
<tr>
<td>查看数据维度</td>
<td>np.shape()</td>
<td>tensor.shape</td>
</tr>
<tr>
<td>查看数据类型</td>
<td>type()</td>
<td>tensor.type</td>
</tr>
<tr>
<td>产生随机数</td>
<td>np.random.rand(2,3))</td>
<td>np.ones((2,3))</td>
</tr>
<tr>
<td>产生全1矩阵/张量</td>
<td>np.ones()</td>
<td>torch.ones()</td>
</tr>
</tbody>
</table>
<p><strong>１.１Numpy数组与torch.Tensor相互转换</strong></p>
<ul>
<li>torch.from_numpy():     from numpy to tensor</li>
<li>numpy():     from tensor to numpy</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># random numpy array</span></div><div class="line">array = np.random.rand(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># from numpy to tensor</span></div><div class="line">from_numpy_to_tensor = torch.from_numpy(array)</div><div class="line"></div><div class="line"><span class="comment"># from tensor to numpy</span></div><div class="line">tensor = from_numpy_to_tensor</div><div class="line">from_tensor_to_numpy = tensor.numpy()</div></pre></td></tr></table></figure>
<p>注意Torch的Tensor和numpy的array会共享他们的存储空间，修改一个会导致另外的一个也被修改。</p>
<h3 id="1-3-基础数学运算"><a href="#1-3-基础数学运算" class="headerlink" title="1.3 基础数学运算"></a>1.3 基础数学运算</h3><p>a和b都是tensor</p>
<table>
<thead>
<tr>
<th>运算</th>
<th>表达式/函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>Resize</td>
<td>view()</td>
</tr>
<tr>
<td>加法</td>
<td>torch.add(a,b) = a + b</td>
</tr>
<tr>
<td>减法</td>
<td>a.sub(b) = a - b</td>
</tr>
<tr>
<td>元素对应相乘</td>
<td>torch.mul(a,b) = a * b</td>
</tr>
<tr>
<td>元素对应相除</td>
<td>torch.div(a,b) = a / b</td>
</tr>
<tr>
<td>均值</td>
<td>a.mean()</td>
</tr>
<tr>
<td>标准差（std）</td>
<td>a.std()</td>
</tr>
</tbody>
</table>
<h3 id="1-4-Variables"><a href="#1-4-Variables" class="headerlink" title="1.4 Variables"></a>1.4 Variables</h3><ul>
<li>变量和张量之间的差异是变量可以累积梯度</li>
<li>我们也可以用变量进行数学运算</li>
<li>为了进行反向传播，我们需要变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># import variable from pytorch library</div><div class="line">from torch.autograd import Variable</div><div class="line"></div><div class="line"># define variable</div><div class="line">var = Variable(torch.ones(3), requires_grad = True)</div></pre></td></tr></table></figure>
<p>假设我们有等式y = x^2，现在要计算在点y=10处的梯度，pytorch实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">array = [2,4]</div><div class="line">tensor = torch.Tensor(array)</div><div class="line">x = Variable(tensor, requires_grad = True)</div><div class="line">y = x**2</div><div class="line"></div><div class="line">o = (1/2)*sum(y) #理解为一个点</div><div class="line"></div><div class="line"># backward</div><div class="line">o.backward() # calculates gradients</div></pre></td></tr></table></figure>
<h3 id="1-5-使用gpu运算"><a href="#1-5-使用gpu运算" class="headerlink" title="1.5 使用gpu运算"></a>1.5 使用gpu运算</h3><p>当我们使用.cuda()的时候，就可以把tensor移动到GPU上去</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> torch.cuda.is_available():</div><div class="line">    x = x.cuda()</div><div class="line">    y = y.cuda()</div><div class="line">    x + y</div></pre></td></tr></table></figure>
<hr>
<h2 id="2-数据来源"><a href="#2-数据来源" class="headerlink" title="2.数据来源"></a>2.数据来源</h2><p>通常来讲，当你处理图像，声音，文本，视频时需要使用python中其他独立的包来将他们转换为numpy中的数组，之后再转换为<strong>torch.Tensor</strong></p>
<ul>
<li>图像的话，可以用Pillow, OpenCV</li>
<li>声音处理可以用scipy和librosa</li>
<li>文本的处理使用原生Python或者Cython以及NLTK和SpaCy都可以</li>
</ul>
<p>特别的对于图像，我们有torchvision这个包可用,其中包含了一些现成的数据集如：Imagenet, CIFAR10, MNIST等等。同时还有一些转换图像用的工具。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import torch</div><div class="line">import torch.nn as nn  ## 搭建神经网络</div><div class="line">import torchvision.transforms as transforms   ## 下载数据</div><div class="line">from torch.autograd import Variable   ## 更新梯度</div><div class="line">import pandas as pd</div><div class="line">from sklearn.model_selection import train_test_split</div><div class="line"></div><div class="line"></div><div class="line">##########   准备数据，基本的numpy操作   ###############</div><div class="line">train = pd.read_csv(r&quot;../input/train.csv&quot;,dtype = np.float32)</div><div class="line"></div><div class="line"># 将数据拆分为特征(pixels) 和标签(numbers from 0 to 9)</div><div class="line">targets_numpy = train.label.values</div><div class="line">features_numpy = train.loc[:,train.columns != &quot;label&quot;].values/255 # normalization</div><div class="line"></div><div class="line">#划分训练集与验证集：80%：20% </div><div class="line">features_train, features_test, targets_train, targets_test = train_test_split(features_numpy,targets_numpy,test_size = 0.2,random_state = 42) </div><div class="line"></div><div class="line">###########  将numpy转为tensor,从而创建训练集和测试集   #########</div><div class="line">featuresTrain = torch.from_numpy(features_train)</div><div class="line">targetsTrain = torch.from_numpy(targets_train).type(torch.LongTensor) # 数据类型为long</div><div class="line"></div><div class="line">featuresTest = torch.from_numpy(features_test)</div><div class="line">targetsTest = torch.from_numpy(targets_test).type(torch.LongTensor) #数据类型为long</div><div class="line"></div><div class="line"># class torch.utils.data.TensorDataset:封装成tensor的数据集，每一个样本都通过索引张量来获得</div><div class="line">train = torch.utils.data.TensorDataset(featuresTrain,targetsTrain)</div><div class="line">test = torch.utils.data.TensorDataset(featuresTest,targetsTest)</div><div class="line"></div><div class="line"># class torch.utils.data.DataLoader 数据加载器。组合了一个数据集和采样器，并提供关于数据的迭代器</div><div class="line">train_loader = torch.utils.data.DataLoader(train, batch_size = batch_size, shuffle = False)</div><div class="line">test_loader = torch.utils.data.DataLoader(test, batch_size = batch_size, shuffle = False)</div></pre></td></tr></table></figure>
<hr>
<h2 id="3-构建神经网络"><a href="#3-构建神经网络" class="headerlink" title="3.构建神经网络"></a>3.构建神经网络</h2><p>先看一个简单的例子：</p>
<p>###　３.１　ANN网络</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create 人工神经网络(ANN) Model</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ANNModel</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_dim, hidden_dim, output_dim)</span>:</span></div><div class="line">        super(ANNModel, self).__init__()    <span class="comment">## 继承nn.Module类</span></div><div class="line">        self.fc1 = nn.Linear(input_dim, hidden_dim)  <span class="comment"># Linear function 1: 784 --&gt; 100</span></div><div class="line">        self.relu1 = nn.ReLU()     <span class="comment"># Non-linearity 1 </span></div><div class="line">        self.fc2 = nn.Linear(hidden_dim, hidden_dim) <span class="comment"># Linear function 2: 100 --&gt; 100</span></div><div class="line">        self.tanh2 = nn.Tanh()   <span class="comment"># Non-linearity 2</span></div><div class="line">        <span class="comment"># Linear function 3: 100 --&gt; 100</span></div><div class="line">        self.fc3 = nn.Linear(hidden_dim, hidden_dim)  <span class="comment"># Linear function 3: 100 --&gt; 100</span></div><div class="line">       self.elu3 = nn.ELU()  <span class="comment"># Non-linearity 3</span></div><div class="line">        self.fc4 = nn.Linear(hidden_dim, output_dim)  <span class="comment"># Linear function 4 (readout): 100 --&gt; 10</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span>  </div><div class="line">        out = self.fc1(x) <span class="comment"># Linear function 1</span></div><div class="line">        out = self.relu1(out) <span class="comment"># Non-linearity 1</span></div><div class="line">        out = self.fc2(out)  <span class="comment"># Linear function 2</span></div><div class="line">        out = self.tanh2(out)  <span class="comment"># Non-linearity 2</span></div><div class="line">        out = self.fc3(out)   <span class="comment"># Linear function 2</span></div><div class="line">        out = self.elu3(out)  <span class="comment"># Non-linearity 2</span></div><div class="line">        out = self.fc4(out)  <span class="comment"># Linear function 4 (readout)</span></div><div class="line">        <span class="keyword">return</span> out</div><div class="line"></div><div class="line">print(ANNModel)   <span class="comment"># 打印网络结构</span></div><div class="line"></div><div class="line"><span class="comment"># 模型中可学习的参数会由ANNModel.parameters()返回</span></div><div class="line">params = list(ANNModel.parameters())</div><div class="line"><span class="keyword">print</span> (len(params))</div><div class="line"><span class="keyword">print</span> (params[<span class="number">0</span>].size())</div><div class="line">    </div><div class="line"><span class="comment"># 实例化人工神经网络</span></div><div class="line">input_dim = <span class="number">28</span>*<span class="number">28</span></div><div class="line">hidden_dim = <span class="number">150</span> </div><div class="line">output_dim = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment"># 创建ANN模型</span></div><div class="line">model = ANNModel(input_dim, hidden_dim, output_dim)</div><div class="line"></div><div class="line"><span class="comment"># Cross Entropy Loss </span></div><div class="line"><span class="comment">## loss function采用了(output,target)作为函数的输入</span></div><div class="line">error = nn.CrossEntropyLoss()</div><div class="line"></div><div class="line"><span class="comment"># SGD Optimizer</span></div><div class="line">learning_rate = <span class="number">0.02</span></div><div class="line">optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)  <span class="comment"># torch.optim包含SGD, Nesterov-SGD, Adam, RMSProp, etc</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ANN model training</span></div><div class="line">count = <span class="number">0</span></div><div class="line">loss_list = []</div><div class="line">iteration_list = []</div><div class="line">accuracy_list = []</div><div class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</div><div class="line">    <span class="keyword">for</span> i, (images, labels) <span class="keyword">in</span> enumerate(train_loader):</div><div class="line">        train = Variable(images.view(<span class="number">-1</span>, <span class="number">28</span>*<span class="number">28</span>))</div><div class="line">        labels = Variable(labels)  </div><div class="line">        <span class="comment"># 清除梯度：在每次进行backward之前，必须要清空先前存在的梯度</span></div><div class="line">        optimizer.zero_grad()</div><div class="line">        outputs = model(train)   <span class="comment"># 前向传播，创建网络</span></div><div class="line">        loss = error(outputs, labels) <span class="comment"># 计算softmax 和ross entropy loss</span></div><div class="line">        loss.backward()  <span class="comment"># 计算梯度</span></div><div class="line">        optimizer.step()  <span class="comment"># 更新参数</span></div><div class="line">        </div><div class="line">        count += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> count % <span class="number">50</span> == <span class="number">0</span>:</div><div class="line">            <span class="comment"># 计算正确率         </span></div><div class="line">            correct = <span class="number">0</span></div><div class="line">            total = <span class="number">0</span></div><div class="line">            <span class="comment"># 预测测试集数据</span></div><div class="line">            <span class="keyword">for</span> images, labels <span class="keyword">in</span> test_loader:</div><div class="line">                test = Variable(images.view(<span class="number">-1</span>, <span class="number">28</span>*<span class="number">28</span>))         </div><div class="line">                <span class="comment"># Forward propagation</span></div><div class="line">                outputs = model(test)</div><div class="line">                </div><div class="line">                <span class="comment"># Get predictions from the maximum value</span></div><div class="line">                predicted = torch.max(outputs.data, <span class="number">1</span>)[<span class="number">1</span>]</div><div class="line">                </div><div class="line">                <span class="comment"># Total number of labels</span></div><div class="line">                total += len(labels)</div><div class="line"></div><div class="line">                <span class="comment"># Total correct predictions</span></div><div class="line">                correct += (predicted == labels).sum()</div><div class="line">            </div><div class="line">            accuracy = <span class="number">100</span> * correct / float(total)</div><div class="line">            </div><div class="line">            <span class="comment"># store loss and iteration</span></div><div class="line">            loss_list.append(loss.data)</div><div class="line">            iteration_list.append(count)</div><div class="line">            accuracy_list.append(accuracy)</div><div class="line">            <span class="keyword">if</span> count % <span class="number">500</span> == <span class="number">0</span>:</div><div class="line">                <span class="comment"># Print Loss</span></div><div class="line">                print(<span class="string">'Iteration: &#123;&#125;  Loss: &#123;&#125;  Accuracy: &#123;&#125; %'</span>.format(count, loss.data[<span class="number">0</span>], accuracy))</div></pre></td></tr></table></figure>
<ul>
<li><p>使用 torch.nn 包可以进行神经网络的构建，而nn建立在autograd的基础上来进行模型的定义和微分。</p>
</li>
<li><p>nn.Module中包含着神经网络的层，同时forward(input)方法能够将output进行返回。</p>
</li>
</ul>
<ul>
<li><p>autograd 包提供Tensor所有操作的自动求导方法。</p>
</li>
<li><p>autograd.Variable 这是这个包中最核心的类。 它包装了一个Tensor，并且几乎支持所有的定义在其上的操作。一旦完成了你的运算，你可以调用 .backward()来自动计算出所有的梯度。</p>
</li>
<li><p>你可以通过属性 .data 来访问原始的tensor，而关于这一Variable的梯度则集中于 .grad 属性中。</p>
</li>
<li><p>还有一个在自动求导中非常重要的类 Function，Variable 和 Function 二者相互联系并且构建了一个描述整个运算过程的无环图。每个Variable拥有一个 .creator 属性，其引用了一个创建Variable的 Function。</p>
<p><img src="https://pic4.zhimg.com/80/v2-08e0530dfd6879ff2bee56cfc5cc5073_hd.jpg" alt="1"></p>
</li>
</ul>
<p><strong>注意: torch.nn 只接受小批量的数据</strong><br>整个torch.nn包只接受那种小批量样本的数据，而非单个样本。 例如，nn.Conv2d能够结构一个四维的TensornSamples x nChannels x Height x Width。<br><strong>如果你拿的是单个样本，使用input.unsqueeze(0)来加一个假维度就可以了。</strong></p>
<h3 id="3-2使用gpu训练模型"><a href="#3-2使用gpu训练模型" class="headerlink" title="3.2使用gpu训练模型"></a>3.2使用gpu训练模型</h3><p>就像你把Tensor传递给GPU进行运算一样，你也可以将神经网络传递给GPU。这一过程将逐级进行操作，直到所有组件全部都传递到GPU上。</p>
<p><strong>记住，每一步都需要把输入和目标传给GPU。</strong></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://zhuanlan.zhihu.com/p/25572330?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=833404081191137280" target="_blank" rel="external">PyTorch深度学习：60分钟入门(Translation)</a> <a href="https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html" target="_blank" rel="external">原文</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;与numpy对比，较少pytorch的基本操作，然后搭建一个简单堆叠式的人工神经网络&lt;/blockquote&gt;
    
    </summary>
    
      <category term="pytorch" scheme="https:///AnJingwd.github.io/categories/pytorch/"/>
    
    
      <category term="pytorch" scheme="https:///AnJingwd.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>IDM下载工具</title>
    <link href="https:///AnJingwd.github.io/2018/09/05/IDM%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/"/>
    <id>https:///AnJingwd.github.io/2018/09/05/IDM下载工具/</id>
    <published>2018-09-05T11:11:39.000Z</published>
    <updated>2018-09-12T01:24:28.334Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">IDM安装及使用</blockquote>

<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Internet Download Manager（简称“IDM”）是一种将下载速度提高5倍的工具，支持断点下载和批量下载。Internet Download Manager支持代理服务器，ftp和http协议，防火墙，重定向，Cookie，授权，MP3音频和MPEG视频内容处理。</p>
<h2 id="安装及破解"><a href="#安装及破解" class="headerlink" title="安装及破解"></a>安装及破解</h2><p>（1）修改C:\Windows\System32\drivers\etc\host目录下的host文件，添加这几项，将IDM的认证服务器域名屏蔽了。</p>
<p>127.0.0.1 tonec.com<br>127.0.0.1 www.tonec.com<br>127.0.0.1 registeridm.com<br>127.0.0.1 www.registeridm.com<br>127.0.0.1 secure.registeridm.com<br>127.0.0.1 internetdownloadmanager.com<br>127.0.0.1 www.internetdownloadmanager.com<br>127.0.0.1 secure.internetdownloadmanager.com<br>127.0.0.1 mirror.internetdownloadmanager.com<br>127.0.0.1 mirror2.internetdownloadmanager.com<br>127.0.0.1 mirror3.internetdownloadmanager.com</p>
<p>（2）开始 -&gt; 运行 -&gt; 输入cmd -&gt; 在CMD窗口输入</p>
<pre><code>ipconfig /flushdns
</code></pre><p>刷新DNS解析缓存，使之生效。</p>
<p>（3）打开IDM，输入序列号，断网，确定，当工具栏注册变灰色即破解成功。</p>
<h3 id="或者使用破解插件"><a href="#或者使用破解插件" class="headerlink" title="或者使用破解插件"></a>或者使用破解插件</h3><p>链接：</p>
<p><a href="http://www.carrotchou.blog/59.html" target="_blank" rel="external">下载神器 Internet Download Manager v6.31 Build 3 中文破解版</a></p>
<h3 id="集成到浏览器"><a href="#集成到浏览器" class="headerlink" title="集成到浏览器"></a>集成到浏览器</h3><p>IDM 默认可以集成到 Internet Explorer, Opera, MSN Explorer, AOL, Netscape, Mozilla, Mozilla Firebird, Mozilla Firefox, MyIE2, Avant Browser, NetCaptor, GoSurf, Fast Browser, SlimBrowser, 和其它更多受欢迎的浏览器。</p>
<p>（1）菜单栏帮助—–&gt;检测更新</p>
<p>（2）打开chrome浏览器扩展工具，将IDM安装目录下的IDMGCExt.crx文件拖入来安装扩展</p>
<p>具体教程参考：<a href="https://www.internetdownloadmanager.cn/idm/24798" target="_blank" rel="external">链接</a></p>
<h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="## 使用技巧"></a>## 使用技巧</h1><p>因为IDM只能下载HTTP HTTPS FTP连接，不能下载ED2K,种子,迅雷,磁力等等其他。</p>
<p>如果要下载以上连接，需要先用支持离线功能的网盘（(百度离线、115离线、迅雷离线、等等)，再用IDM通过网盘链接下载到本地。</p>
<p>OS5HG-K90NH-SXOGT-7JYEZ<br>R2C1T-O0KQO-JAVU2-4MMYP<br>M2A16-47AAW-6NLYP-V1E0J<br>IZO7M-360FW-QY1XP-AWLPN<br>46YFS-S9G7H-QZFWI-QQBQB<br>TUTR2-I2NHO-GQBC6-ZECWH</p>
<p>BFBND-FXJ4C-LW18E-WP2H3<br>YRB4C-X2GT3-WU781-UKHN5<br>06NWL-EHOER-DZ12V-9IMMC<br>4UWOB-RHE7H-6IET0-ECUOG<br>CUFNR-D4R3C-UKPH6-GD4A1  </p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="https://www.cnblogs.com/lovepipi/p/4058347.html" target="_blank" rel="external">IDM破解</a></p>
<p>（2）<a href="http://blog.sina.com.cn/s/blog_14ba2cceb0102vpot.html" target="_blank" rel="external">比迅雷好用的下载软件IDM图文教程（5.12有更新）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;IDM安装及使用&lt;/blockquote&gt;
    
    </summary>
    
      <category term="软件" scheme="https:///AnJingwd.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https:///AnJingwd.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>R操作MySQL数据库</title>
    <link href="https:///AnJingwd.github.io/2018/08/25/R%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https:///AnJingwd.github.io/2018/08/25/R操作MySQL数据库/</id>
    <published>2018-08-25T10:07:44.000Z</published>
    <updated>2018-08-28T07:01:47.695Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">R操作MySQL数据库</blockquote>

<a id="more"></a>
<h1 id="RMySQL操作MySQL数据库"><a href="#RMySQL操作MySQL数据库" class="headerlink" title="RMySQL操作MySQL数据库"></a>RMySQL操作MySQL数据库</h1><ul>
<li><p>连接MySQL数据库</p>
<pre><code>conn &lt;- dbConnect(MySQL(), 
    dbname=&quot;r_data&quot;,
    username=&quot;root&quot;, 
    password=&quot;root&quot;, 
    host=&quot;127.0.0.1&quot;, 
    port=3306)

summary(conn)  
</code></pre></li>
<li><p>查看数据库信息</p>
<pre><code>dbGetInfo(conn)
</code></pre></li>
<li><p>查看数据库表格列表</p>
<pre><code>dbListTables(conn)
</code></pre></li>
<li><p>从R导出数据到数据库</p>
</li>
</ul>
<p>dbWriteTable函数用来将R中的数据导入MySQL数据库，其包括创建新的表格，覆盖已有的表格，追加数据到表格。用法为dbWriteTable(MySQL连接对象名，表格名，R数据框名)(row.names=FALSE不插入row.names字段)</p>
<p>(1) 创建</p>
<pre><code>&gt; dbWriteTable(conn,&quot;test&quot;,cars，row.names=FALSE)
[1] TRUE
&gt; dbListTables(conn)
[1] &quot;test&quot;
</code></pre><p>（2） 覆盖</p>
<pre><code>dbWriteTable(conn,&quot;test&quot;,cars2,row.names=FALSE,overwrite = TRUE)
</code></pre><p>（3）追加</p>
<pre><code>dbWriteTable(conn,&quot;test&quot;,cars3,row.names=FALSE,append = TRUE)
</code></pre><p><strong>尽量避免使用WriteTable()函数，因为它会删除你原来定义的表结构，创建新的表结构再插入</strong></p>
<p>（4）删除表格</p>
<pre><code>dbRemoveTable(con,&quot;test&quot;)
</code></pre><ul>
<li>导出数据到R数据框</li>
</ul>
<p>dbReadTable()函数用来从MySQL数据库提取整个表格（前提是表格数据量不是很大）。</p>
<pre><code>dbReadTable(conn,&quot;test&quot;)
</code></pre><ul>
<li><p>获取表格字段列表</p>
<pre><code>dbListFields(conn,&quot;test&quot;)
</code></pre></li>
<li><p>查询语句使用</p>
</li>
</ul>
<p>dbGetQuery()函数用来提取表格中指定的行(使用LIMIT查看前几行)</p>
<pre><code>dbGetQuery(conn,&quot;SELECT * FROM test LIMIT 5;&quot;)
</code></pre><p>另一种方式是使用dbSendQuery()查询数据库，然后使用dbFetch()获取数据</p>
<pre><code>dbSendQuery(conn,&quot;SET NAMES gbk&quot;)  ##若表格中含有中文需要先设置字符集gbk
query &lt;- dbSendQuery(conn,&quot;SELECT * FROM test;&quot;)
data &lt;- dbFetch(query,n=5)  ## data &lt;- dbFetch(query,n=-1)获取所有查询到的数据
</code></pre><ul>
<li><p>dbGetInfo()函数也可以查看query对象的信息</p>
<pre><code>dbGetInfo(query)
</code></pre></li>
<li><p>dbGetStatement()函数用于返回query的MySQL查询语句</p>
<pre><code>&gt; dbGetInfo(query)
$`statement`
[1] &quot;SELECT * FROM test;&quot;
</code></pre></li>
<li><p>dbGetRowCount()函数用于返回dbFetch对象查询到的数据行数</p>
<pre><code>&gt;dbGetRowCount(data)
5
</code></pre></li>
<li><p>dbColumnInfo()函数用于查看query对象的列信息</p>
<pre><code>&gt; dbColumnInfo(query)
       name    Sclass      type length
1 row_names character BLOB/TEXT  65535
2     speed    double    DOUBLE     22
3      dist    double    DOUBLE     22
</code></pre></li>
<li><p>dbClearResult()函数释放dbSendQuery()函数的数据库资源</p>
<pre><code>dbClearResult(query)
</code></pre></li>
</ul>
<ul>
<li><p>检查数据类型</p>
<pre><code>&gt; dbDataType(RMySQL::MySQL(),&quot;A&quot;)
[1] &quot;text&quot;
&gt; dbDataType(RMySQL::MySQL(),1:5)
[1] &quot;bigint&quot;
&gt; dbDataType(RMySQL::MySQL(),1.5)
[1] &quot;double&quot;
</code></pre></li>
</ul>
<ul>
<li><p>断开数据库连接</p>
<pre><code>dbDisconnect(conn)
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;R操作MySQL数据库&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https:///AnJingwd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https:///AnJingwd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>R数据整合函数包小结</title>
    <link href="https:///AnJingwd.github.io/2018/08/23/R%E6%95%B0%E6%8D%AE%E6%95%B4%E5%90%88%E5%87%BD%E6%95%B0%E5%8C%85%E5%B0%8F%E7%BB%93/"/>
    <id>https:///AnJingwd.github.io/2018/08/23/R数据整合函数包小结/</id>
    <published>2018-08-23T08:05:12.000Z</published>
    <updated>2018-08-26T02:40:18.646Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">R数据整合函数包小结</blockquote>

<a id="more"></a>
<p><a href="https://www.analyticsvidhya.com/blog/2015/12/faster-data-manipulation-7-packages/" target="_blank" rel="external">Do Faster Data Manipulation using These 7 R Packages（推荐）</a></p>
<p>R语言数据整合常用包列表</p>
<ul>
<li>dplyr</li>
<li>data.table</li>
<li>ggplot2</li>
<li>reshape2</li>
<li>readr</li>
<li>tidyr</li>
<li>lubridate</li>
</ul>
<hr>
<h1 id="apply函数"><a href="#apply函数" class="headerlink" title="apply函数"></a>apply函数</h1><p><img src="https://i.imgur.com/1lUFZ8r.jpg" alt=""></p>
<p>&emsp;&emsp;在使用R时，不要用循环，效率特别低，要用向量计算代替循环计算。原因在于R的循环操作for和while，都是基于R语言本身来实现的，而向量操作是基于底层的C语言函数实现的，从性能上来看，就会有比较明显的差距了。那么如何使用C的函数来实现向量计算呢，就是要用到apply的家族函数。</p>
<p>apply函数本身就是解决数据循环处理的问题，为了面向不同的数据类型，不同的返回值，apply函数组成了一个函数族，包括了8个功能类似的函数。</p>
<p><img src="https://i.imgur.com/PKZVkSK.png" alt=""></p>
<p>&emsp;&emsp;apply函数是这三个函数的精髓，lapply是它的变种，sapply是lapply的精华简洁版本。apply函数的基本命令格式是：apply(数据，向量，函数)。</p>
<ul>
<li>数据可以是矩阵，数据框，数组（二维或者多维）</li>
<li>向量指的是矩阵的行或列，通俗的说，向量为1的时候横着算，向量为2的时候竖着算。</li>
<li>函数作用对象区分多元素和单元素：例如sum函数它必须应用在多个元素（数值）上，此时可利用apply(matrix,1,sum)对矩阵列求和；又例如sqrt函数它只作用于单个数值，此时apply(matrix,1,sqrt)表示对每个元素求平方根，每一列的运算结果变成新的一行；而apply(matrix,2,sqrt)表示对每个元素求平方根，每一列的运算结果变成新的一列。</li>
<li>使用自定义函数：apply(matrix,1,function(x),MyFunction(x)) (单个自变量x, 当这个函数应用在我们数据上的时候，就默认是对数据矩阵的每一个元素（数值）进行运算。)</li>
<li>多自变量函数function (y) MyFunction(x,y) 从这个写法上可以看出，function定义了，在多元函数情况下，数据矩阵的自变量对应位置，此时为y</li>
</ul>
<p>&emsp;&emsp;lapply的特殊之处在于，它的输出形式为列表（list），并且每一个运算结果（数值）都是一个单独的列表。这就是说，如果运算结果有六个数值，lapply就会输出六个列表，每一个列表里为一个数值。(根据运算顺序(按列)将结果输出为列表。)<br>在执行lapply的时候即可以预先对结果输出形式进行设计。比如说，合并列表做个矩阵啊（matrix）或者数据框（data frame）</p>
<ul>
<li>合并成矩阵： do.call(rbind,lapply(matrix,sqrt)) 原始matrix为3x2的矩阵，处理后变为6行一列矩阵；do.call(cbind,lapply(matrix,sqrt))处理后变为1行6列的矩阵</li>
<li>合并成数据框：data.frame(lapply(matrix,sqrt)) 处理后成为1行6列的数据框</li>
</ul>
<hr>
<h1 id="dplyr函数包"><a href="#dplyr函数包" class="headerlink" title="dplyr函数包"></a>dplyr函数包</h1><p>&emsp;&emsp;首先需要安装dplyr包，install.packages(“dplyr”)。dplyr包是“方便应用”型包，主要组成不是计算类函数，而是快速加工数据的函数。dplyr包系列的命令大部分可以在一个函数内包含多个条件，各个条件之间用逗号连接；不同分类的条件可以在同一个函数中混合运用；多个函数之间可以用包内的串串函数（函数名：pipe，函数写法：%in%）连接在一起；dplyr包在处理大样本量的复杂数据时极为好用。</p>
<p>接下来介绍dplyr包中七个基础函数的使用方法:</p>
<p><img src="https://i.imgur.com/016wkfX.jpg" alt=""></p>
<p>其中weight和Time为numeric类型；Chick和Diet为factor类型</p>
<p>dplyr系列命令的通用格式：函数名称（应用数据集，条件）</p>
<ul>
<li>count是计数命令，专门来数某一项内容的细分组里分别有多少样本</li>
</ul>
<p>count(ChickWeight,Diet) 对Diet中每一组的样本量进行分组计数</p>
<ul>
<li>summarise是总结命令，它可以对1个或多个列进行总结（求最小值，最大值，均值等等）</li>
</ul>
<p>summarise(CheckWeight,mean(weight,na.rm=TRUE))  对weight列移除NA值后求均值<br>summarise(CheckWeight,mean(weight,na.rm=TRUE),min(weight))  对weight列移除NA值后求均值并求最小值</p>
<p><strong>dplyr这个包中很重要的一个点：在一个命令中可以有多个执行条件，每个条件以逗号隔开。</strong></p>
<ul>
<li>group_by是分组命令，它可以把整个数据集按照某项内容分组。</li>
</ul>
<p>summarise(group_by(ChickWeight,Diet),mean(Time,na.rm=TRUE)) 针对Diet的分组，求Time的均值</p>
<ul>
<li><p>filter命令是筛选数据内容的命令</p>
<ul>
<li>filter(ChickWeight,weight&gt;=40)筛选特定数值</li>
<li>filter(ChickWeight,weight &gt;=40,Time&gt;=2)两个数值筛选条件中间用,号隔开</li>
<li>filter(ChickWeight,Diet == 1) 字符数据的是否判定用的是双等号==</li>
<li>filter(ChickWeight,Diet %in% c(1,3)) 在筛选字符数据时，我们可以设定两项或多项条件，在这一情况下，逗号就不再适用了，我们需要连用集合c()和%in%</li>
<li>filter(ChickWeight,Chick ==2, Diet == 1) 同时筛选两列字符数据</li>
<li>filter(ChickWeight,weight&gt;=40,Chick == 2) 同时进行数值数据筛选和字符数筛选</li>
</ul>
</li>
<li><p>select命令能够选择某一列或某几列，以及排除某一列或某几列。容易和filter混淆的select命令来啦。之前我们说，filter筛选的是内容，select选的是“列”。</p>
<ul>
<li>select(ChickWeight,weight,Diet)筛选出weight和Diet两列</li>
<li>select(ChickWeight,-weight)排除weight列</li>
<li>select(ChickWeight,-weight,-Diet)排除weight列和Diet列</li>
<li>select(ChichWeight,Time:Diet) 从Time列到Diet列都要</li>
</ul>
</li>
<li><p>处理数据的时候我们时不时会遇到需要添加一列，列的内容是行中某项数据的处理结果， mutate命令可以帮助我们很方便的进行这一操作。</p>
</li>
</ul>
<p>mutate(ChickWeight,Diff=(weight-mean(weight)))在原始数据后面加一列，列名为Diff,列的内容荣是该行weight的值weight均值之差</p>
<ul>
<li><p>pipe，在R中的表达方式为%in%。请大家注意这两者是不同的，之前我们列举的六个函数都是名称与表达方式相同，但串串函数是个特例。串就是羊肉串的串，作用一模一样，只不过串起来的是“函数命令”，目的是将一系列函数连续使用，减少代码量，减少中间数据，直接得到最终运算结果。</p>
<pre><code>CW_p1 &lt;- ChickWeight%&gt;%
   filter(Chick!=c（15,18,20,17）) %&gt;%   #第一步函数
   group_by(Diet)%&gt;%  # 第二步函数
   summarise(mean(Time,na.rm=TRUE))  #第三步函数
</code></pre></li>
</ul>
<p>每一步都是根据上一步的结果进行运算，最后的结果是对最新的数据进行Time项的总结（求均值）</p>
<p>数据框关联的函数（类似merge()函数）</p>
<ul>
<li>inner_join(x, y, by = NULL, copy = FALSE, suffix = c(“.x”, “.y”), …) #内连接，merge x,y两个数据框，仅保留都匹配上的</li>
<li>left_join(x, y, by = NULL, copy = FALSE, suffix = c(“.x”, “.y”), …)  #左连接，在x数据框上加上y数据框匹配上的</li>
<li>right_join(x, y, by = NULL, copy = FALSE, suffix = c(“.x”, “.y”), …) #右连接，在y数据框上加上x数据框匹配上的</li>
<li>full_join(x, y, by = NULL, copy = FALSE, suffix = c(“.x”, “.y”), …)  #全连接，跟内连接的区别在于其保留x,y数据框的所有行</li>
<li>semi_join(x, y, by = NULL, copy = FALSE, …)  #返回x数据框中能与y数据框匹配上的行</li>
<li>anti_join(x, y, by = NULL, copy = FALSE, …)  #返回x数据框中不能与y数据框匹配上的行</li>
</ul>
<hr>
<h1 id="plyr-包"><a href="#plyr-包" class="headerlink" title="plyr 包"></a>plyr 包</h1><p>plyr包可以进行类似于数据透视表的操作，将数据分割成更小的数据，对分割后的数据进行些操作，最后把操作的结果汇总。</p>
<hr>
<h1 id="reshape2包"><a href="#reshape2包" class="headerlink" title="reshape2包"></a>reshape2包</h1><ul>
<li>宽数据:每一列为一个变量，每一行为变量所对应的值</li>
<li>长数据:一列包含了所有的变量，而另一列则是与之相关的值(长数据不一定只有两列)</li>
</ul>
<p>reshape2 用得比较多的是melt和cast两个函数。</p>
<ul>
<li>melt函数对宽数据进行处理，得到长数据</li>
<li>cast函数对长数据进行处理，得到宽数据</li>
</ul>
<p>melt公式：<br>    melt(data,id.vars,measure.vars,variable.name=’variable’,…,na.rm=FALSE,value.name=’value’,factorAsStrings=TRUE)</p>
<p><img src="https://i.imgur.com/GFLAvmZ.jpg" alt=""></p>
<p>（1）只带有data参数的情况</p>
<p>我们可以看到如果id.vars和measure.vars都没有设置，默认会使用所有的因子变量和字符变量作为ID变量，使用所有的非因子和非字符变量作为测量变量</p>
<p><img src="https://i.imgur.com/GdWK2Wi.jpg" alt=""></p>
<p>（2）使用id.vars参数的情况</p>
<p>指定ID variables就是那些能够区分不同行数据的变量，个人感觉类似于数据库中的主键。</p>
<p><img src="https://i.imgur.com/wdhBN21.jpg" alt=""></p>
<p>（3）使用variable.name和value.name的情况，宽数据转长数据的同时修改列名(长数据有一列数据是变量的类型，有一列是变量的值)</p>
<pre><code>aql &lt;- melt(airquanlity,id.vars = c(&quot;month&quot;,&quot;day&quot;)),
    variable.name = &quot;climate_variable&quot;,
    value.name =&quot;climate_value&quot;)
</code></pre><p><img src="https://i.imgur.com/9jym0Ov.jpg" alt=""></p>
<p>dcast公式:</p>
<pre><code>dcast(data, formula, fun.aggregate = NULL, ..., margins = NULL,subset = NULL, fill = NULL, drop = TRUE,value.var = guess_value(data))
</code></pre><p><img src="https://i.imgur.com/SoqhqZU.jpg" alt=""></p>
<p>dcast借助于公式来描述数据的形状，左边参数表示”ID variables”，而右边的参数表示measured variables。</p>
<p>（1）aqw &lt;- dcast(aql,month + day ~ variable)</p>
<hr>
<h1 id="tidyr包-reshape2包的进化版"><a href="#tidyr包-reshape2包的进化版" class="headerlink" title="tidyr包- reshape2包的进化版"></a>tidyr包- reshape2包的进化版</h1><p>Tidy data的原则：</p>
<ul>
<li>每一列：代表一个变量（vairable）</li>
<li>每一行：代表一次观测（observation）</li>
</ul>
<p><img src="https://i.imgur.com/kQTOjxN.jpg" alt=""></p>
<p>&emsp;&emsp;要实现转换结果，在Geneid一定的情况下，我们可以把每一个样品和其对应的基因表达量看做一个键-值对（key-value pair）。比如：在GeneID为gene1时，sample1对应的表达量是3，sample2对应的表达量是4。因此，我们在转换数据时，只需按照上述规则，并指定要转换的列即可。使用tidyr包中的gather函数即可实现转换。</p>
<pre><code># gather()命令转换说明：# gather（data=数据框名，key=&quot;key名&quot;，value=&quot;value名&quot;，要转换的列1，列2，列3）
&gt; gene_exp_tidy &lt;- gather(data = gene_exp, key = &quot;sample_name&quot;, value = &quot;expression&quot;, Sample1, Sample2, Sample3)
# 在指定要转换的列时，也可不用列名，直接指定列的编号即可
&gt; gene_exp_tidy &lt;- gather(data = gene_exp, key = &quot;sample_name&quot;, value = &quot;expression&quot;, 2:4)
#  在指定要转换的列时，也可指定不需转换的列，其他列参与转换
&gt; gene_exp_tidy &lt;- gather(data = gene_exp, key = &quot;sample_name&quot;, value = &quot;expression&quot;, -GeneId)
</code></pre><p>使用spread()函数将Tidy格式数据还原</p>
<pre><code>spread(data = gene_exp_tidy, key = &quot;sample_name&quot;, value = &quot;expression&quot;)
</code></pre><p>有时，在数据处理时，我们会遇到下面这种更加复杂的情况，在GeneId一定的情况下，每一样品还对应不同的温度：</p>
<p><img src="https://i.imgur.com/dcteRp7.jpg" alt=""></p>
<p>处理策略：</p>
<ol>
<li>先使用gather()函数，按列进行转换</li>
<li><p>再使用spread()函数，将Sample和温度分开</p>
<p> gene_exp3_tidy &lt;- gather(gene_exp3, key, Expression, -GeneId)</p>
</li>
</ol>
<p><img src="https://i.imgur.com/KY5OOlj.jpg" alt=""></p>
<p>3.使用seprate()函数，对key这一列进行分割</p>
<pre><code>gene_exp3_tidy2 &lt;- separate(gene_exp3_tidy, col = key, into = c(&quot;SampleName&quot;,&quot;Temperature&quot;))
</code></pre><p><img src="https://i.imgur.com/g0nNEt5.jpg" alt=""></p>
<hr>
<h1 id="data-table包"><a href="#data-table包" class="headerlink" title="data.table包"></a>data.table包</h1><p>&emsp;&emsp;如果你的数据量比较大，1GB，10GB，甚至有100GB，对于这种规模比较大的数据集，apply的计算方式就不太能满足计算性能的要求了。你依然可以用data.table包, bigmemory包, ff包等，或者并行计算的包加速R语言在单机上的计算的性能。</p>
<p>&emsp;&emsp;data.table包是一个data.frame的扩展工具集，可以通过自定义keys来设置索引，实现高效的数据索引查询、快速分组、快速连接、快速赋值等数据操作。data.table主要通过二元检索法大大提高数据操作的效率，它也兼容适用于data.frame的向量检索法。同时，data.table对于大数据的快速聚合也有很好的效果，官方介绍说对于 100GB规模内存数据处理，运行效率还是很好的。</p>
<p>&emsp;&emsp;由于data.table对用户使用上是希望和data.frame的操作尽量相似，所以适用于data.frame的查询方法基本都适用于data.table，同时data.table自己具有的一些特性，提供了自定义keys来进行高效的查询。</p>
<hr>
<p><a href="http://r4ds.had.co.nz/workflow-projects.html" target="_blank" rel="external">R for Data Science(推荐)</a> </p>
<p>该书github地址：<a href="https://github.com/hadley/r4ds" target="_blank" rel="external">hadley/r4ds</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="http://blog.fens.me/r-apply/" target="_blank" rel="external">掌握R语言中的apply函数族</a></p>
<p>（2）<a href="http://www.jianshu.com/p/bfddfe29aa39" target="_blank" rel="external">R语言的plyr包简介</a></p>
<p>（3）<a href="http://www.jianshu.com/p/36f5268e932c" target="_blank" rel="external">利用reshape2包进行数据逆透视和数据透视</a></p>
<p>（4）<a href="http://www.xueqing.tv/cms/article/105" target="_blank" rel="external">reshape2包的进化版—tidyr包</a></p>
<p>（5）<a href="http://blog.fens.me/r-data-table/" target="_blank" rel="external">超高性能数据处理包data.table</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;R数据整合函数包小结&lt;/blockquote&gt;
    
    </summary>
    
      <category term="R" scheme="https:///AnJingwd.github.io/categories/R/"/>
    
    
      <category term="R" scheme="https:///AnJingwd.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>Kaggle</title>
    <link href="https:///AnJingwd.github.io/2018/05/13/Kaggle%E5%85%A5%E9%97%A8/"/>
    <id>https:///AnJingwd.github.io/2018/05/13/Kaggle入门/</id>
    <published>2018-05-13T10:21:08.000Z</published>
    <updated>2018-09-02T05:03:40.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">kaggle简介及数据竞赛相关平台</blockquote>

<a id="more"></a>
<h1 id="国内外数据竞赛平台"><a href="#国内外数据竞赛平台" class="headerlink" title="国内外数据竞赛平台"></a>国内外数据竞赛平台</h1><h2 id="国际"><a href="#国际" class="headerlink" title="国际"></a>国际</h2><ul>
<li><a href="https://www.kaggle.com/" target="_blank" rel="external">Kaggle</a>：是一个流行的数据科学竞赛平台，已被谷歌收购。与 GitHub 不同的地方在于，Kaggle 为其社区提供了一整套服务。其中最有名的是它的招聘服务以及名为 <strong>Kaggle Kernels</strong>的代码分享工具。</li>
<li><a href="http://www.kdd.org/" target="_blank" rel="external">KDD CUP</a>： 自1997年以来，KDD举办了年度预测建模竞赛，KDDCup。SIGKDD是Data Mining领域的顶会。KDD Cup是其下的一个比赛。含金量很高。每年都会有比较有意思的题目。不过个人感觉难度还是有的，因而全世界的DM、ML大牛、小牛都可能在做这个。 </li>
<li><a href="http://topcoder.com/" target="_blank" rel="external">Topcoder</a>：已经有近15年的历史，拥有主要的企业合作伙伴，并且在竞争性编程领域与Kaggle（竞争数据科学网站）最为接近。</li>
</ul>
<h2 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h2><ul>
<li><p><a href="https://tianchi.shuju.aliyun.com/competition/index.htm?id=&amp;spm=5176.100067.1234.2.e66NSP" target="_blank" rel="external">天池</a>：由国内科技巨头阿里举办，应该算是国内一流的数据挖掘类型的比赛了。由于是阿里举办，所以比赛获得不错名次的可以获得阿里校招直通车的权利，题目难度的话，个人觉得不算难，与kaggle相仿。</p>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//soda.datashanghai.gov.cn/" target="_blank" rel="external">SODA上海开放数据创新应用大赛</a></p>
</li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.pkbigdata.com/" target="_blank" rel="external">首页-DataCastle大数据竞赛平台</a></li>
</ul>
<h1 id="kaggle比赛类型"><a href="#kaggle比赛类型" class="headerlink" title="kaggle比赛类型"></a>kaggle比赛类型</h1><ul>
<li><a href="https://www.kaggle.com/competitions?sortBy=deadline&amp;group=all&amp;page=1&amp;pageSize=20&amp;segment=inClass" target="_blank" rel="external">课业比赛InClass</a>: <code>课业比赛 InClass</code> 是学校教授机器学习的老师留作业的地方，这里的竞赛有些会向public开放参赛，也有些仅仅是学校内部教学使用。</li>
<li><a href="https://www.kaggle.com/competitions?sortBy=deadline&amp;group=all&amp;page=1&amp;pageSize=20&amp;segment=gettingStarted" target="_blank" rel="external">入门比赛 Getting Started</a>: <code>入门比赛 Getting Started</code> 给萌新们一个试水的机会，没有奖金，但有非常多的前辈经验可供学习。很久以前Kaggle这个栏目名称是101的时候，比赛题目还很多，但是现在只保留了9个最经典的入门竞赛：手写数字识别、沉船事故幸存估计、脸部识别、Julia语言入门。</li>
<li><a href="https://www.kaggle.com/competitions?sortBy=deadline&amp;group=all&amp;page=1&amp;pageSize=20&amp;segment=playground" target="_blank" rel="external">训练场 Playground</a>: <code>训练场 Playground</code>里的题目以有趣为主，比如<a href="https://github.com/apachecn/kaggle/blob/dev/competitions/playground/dogs-vs-cats" target="_blank" rel="external">猫狗照片分类</a>的问题。现在这个分类下的题目不算多，但是热度很高。</li>
<li><a href="https://www.kaggle.com/competitions?sortBy=prize&amp;group=active&amp;page=1&amp;pageSize=20&amp;segment=research" target="_blank" rel="external">研究项目(少奖金) Research</a>: <code>研究型 Research</code> 竞赛通常是机器学习前沿技术或者公益性质的题目。竞赛奖励可能是现金，也有一部分以会议邀请、发表论文的形式奖励。</li>
<li><a href="https://www.kaggle.com/competitions?sortBy=prize&amp;group=active&amp;page=1&amp;pageSize=20&amp;segment=recruitment" target="_blank" rel="external">人才征募 Recruitment</a>:  <code>人才征募 Recruitment</code> 竞赛是赞助企业寻求数据科学家、算法设计人才的渠道。只允许个人参赛，不接受团队报名。</li>
<li><a href="https://www.kaggle.com/competitions?sortBy=prize&amp;group=active&amp;page=1&amp;pageSize=20&amp;segment=featured" target="_blank" rel="external">大型组织比赛(大奖金) Featured</a> : <code>推荐比赛 Featured</code> 是瞄准商业问题带有奖金的公开竞赛。如果有幸赢得比赛，不但可以获得奖金，模型也可能会被竞赛赞助商应用到商业实践中呢。</li>
</ul>
<h1 id="入门kaggle"><a href="#入门kaggle" class="headerlink" title="入门kaggle"></a>入门kaggle</h1><ul>
<li><a href="https://ajourneyintodatascience.quora.com/" target="_blank" rel="external">数据科学之旅（博客）</a></li>
<li><a href="https://www.quora.com/profile/Vincent-Firmansyah" target="_blank" rel="external">文森特·费尔曼西亚</a></li>
<li><a href="https://www.datacamp.com/community/tutorials/machine-learning-python" target="_blank" rel="external">Python Machine Learning: Scikit-Learn Tutorial</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25742261" target="_blank" rel="external">Kaggle 入门指南（推荐）</a></li>
<li><a href="https://mlnote.wordpress.com/2015/12/16/python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E4%B8%8Ekaggle%E5%AE%9E%E6%88%98-machine-learning-for-kaggle-competition-in-python/" target="_blank" rel="external">Machine Learning &amp; Kaggle Competition</a></li>
<li><a href="http://dataunion.org/9805.html?utm_source=tuicool" target="_blank" rel="external">数据科学的完整学习路径—Python版</a></li>
<li><a href="https://www.zhihu.com/question/29316149" target="_blank" rel="external">特征工程到底是什么？</a></li>
</ul>
<ul>
<li><a href="https://www.kaggle.com/learn/overview" target="_blank" rel="external">kaggle Hands-On Data Science Education</a></li>
<li><a href="https://www.kaggle.com/competitions?sortBy=relevance&amp;group=inClass&amp;search=biology&amp;page=1&amp;pageSize=20" target="_blank" rel="external">kaggle in class </a></li>
<li><a href="http://blog.kaggle.com/category/tutorials/" target="_blank" rel="external">Data Science 101</a></li>
<li><a href="https://archive.ics.uci.edu/ml/index.php" target="_blank" rel="external">UC Irvine Machine Learning Repository</a></li>
</ul>
<h1 id="kaggle入门竞赛"><a href="#kaggle入门竞赛" class="headerlink" title="kaggle入门竞赛"></a>kaggle入门竞赛</h1><p>1.Titanic（泰坦尼克之灾）</p>
<p>中文教程： <a href="http://link.zhihu.com/?target=http%3A//blog.csdn.net/han_xiaoyang/article/details/49797143" target="_blank" rel="external">逻辑回归应用之Kaggle泰坦尼克之灾 </a>  &emsp;&emsp; 英文教程：<a href="http://link.zhihu.com/?target=https%3A//www.kaggle.com/helgejo/titanic/an-interactive-data-science-tutorial" target="_blank" rel="external">An Interactive Data Science Tutorial</a></p>
<p>2.House Prices: Advanced Regression Techniques（房价预测）</p>
<p>中文教程：<a href="http://link.zhihu.com/?target=http%3A//www.hao123.com/mid%3Fkey%3DpZwYTjCEQLwEIgwGmyt8mvqVQvDvn1T4PHnvPH0snHc1PH6zP1czQs%26from%3Dtuijian%26pn%3D1" target="_blank" rel="external">Kaggle竞赛 — 2017年房价预测</a>  &emsp;&emsp; 英文教程：<a href="http://link.zhihu.com/?target=https%3A//www.kaggle.com/neviadomski/house-prices-advanced-regression-techniques/how-to-get-to-top-25-with-simple-model-sklearn" target="_blank" rel="external">How to get to TOP 25% with Simple Model using sklearn</a></p>
<p>3.Digital Recognition（数字识别）</p>
<p>中文教程：<a href="http://link.zhihu.com/?target=http%3A//blog.csdn.net/u012162613/article/details/41929171" target="_blank" rel="external">大数据竞赛平台—Kaggle 入门 </a>  &emsp;&emsp; 英文教程：<a href="http://link.zhihu.com/?target=https%3A//www.kaggle.com/arthurtok/digit-recognizer/interactive-intro-to-dimensionality-reduction" target="_blank" rel="external">Interactive Intro to Dimensionality Reduction</a></p>
<h1 id="bioninformatics-competitions"><a href="#bioninformatics-competitions" class="headerlink" title="bioninformatics competitions"></a>bioninformatics competitions</h1><ul>
<li><p><a href="http://en.wikipedia.org/wiki/Critical_Assessment_of_Function_Annotation" target="_blank" rel="external">Critical Assessment of Function Annotation </a>：给定一个基因序列，你可以开发一个软件工具，可以预测基因编码的功能。基本上，你开发一个工具并预测一些未注释基因的功能。在几个月内，这些基因中的一些将被注释，并且这些新注释的基因可以用来衡量你的工具的准确性。这与过去几年ISMB一起举行。</p>
</li>
<li><p><a href="http://en.wikipedia.org/wiki/CASP" target="_blank" rel="external">CASP</a>：类似的概念。给定一个基因序列，你能预测它编码的蛋白质的结构（假设它编码一种蛋白质）。</p>
</li>
<li><p><a href="http://en.wikipedia.org/wiki/Critical_Assessment_of_Prediction_of_Interactions" target="_blank" rel="external">Critical Assessment of Prediction of Interactions</a> ：类似的概念。鉴于蛋白质，你能预测这种蛋白质可以与哪些蛋白质相互作用。</p>
</li>
<li><p><a href="http://assemblathon.org/" target="_blank" rel="external">Assemblathons</a>：Genome 10K项目的一个分支，主要由加州大学戴维斯分校基因组中心组织，Assemblathons是评估基因组组装领域最先进的方法的比赛。</p>
</li>
<li><p><a href="https://www.projectdatasphere.org/projectdatasphere/html/about" target="_blank" rel="external">Project Data Sphere</a>：该项目数据球球平台可与生命科学公司，医院和机构，以及独立的研究人员研究人员所。任何对癌症研究感兴趣的人都可以申请成为授权用户。</p>
</li>
<li><p><a href="https://www.kaggle.com/c/seizure-prediction" target="_blank" rel="external">American Epilepsy Society Seizure Prediction Challenge</a></p>
</li>
</ul>
<h2 id="Dream-Challenges"><a href="#Dream-Challenges" class="headerlink" title="Dream Challenges"></a><a href="http://dreamchallenges.org/" target="_blank" rel="external">Dream Challenges</a></h2><p>DREAM挑战是众包挑战，考察生物学和医学问题</p>
<ul>
<li><a href="http://dreamchallenges.org/challenges/" target="_blank" rel="external">开放挑战</a></li>
<li><a href="http://dreamchallenges.org/publications/" target="_blank" rel="external">梦想挑战参与者出版物</a></li>
<li><a href="http://dreamchallenges.org/tools-2/challenge-algorithms/" target="_blank" rel="external">挑战算法</a>：竞赛报告及算法源码</li>
</ul>
<h2 id="Kaggle历年真题解析"><a href="#Kaggle历年真题解析" class="headerlink" title="Kaggle历年真题解析"></a>Kaggle历年真题解析</h2><p>历年竞赛前3名的解决方案源代码：<a href="http://ndres.me/kaggle-past-solutions/" target="_blank" rel="external">链接</a><br>Kaggle 中文文档：<a href="https://github.com/apachecn/kaggle" target="_blank" rel="external">链接</a><br>比赛收集平台：<a href="https://github.com/iphysresearch/DataSciComp" target="_blank" rel="external">链接</a><br>Kaggle 入门操作指南：<a href="https://github.com/apachecn/kaggle/blob/dev/docs/kaggle-quickstart.md" target="_blank" rel="external">链接</a><br>GitHub 入门须知：<a href="https://github.com/apachecn/kaggle/blob/dev/docs/GitHub/README.md" target="_blank" rel="external">链接</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="https://blog.csdn.net/han_xiaoyang/article/details/49797143" target="_blank" rel="external">机器学习系列(3)_逻辑回归应用之Kaggle泰坦尼克之灾</a></p>
<p>（2）<a href="http://trevorstephens.com/kaggle-titanic-tutorial/getting-started-with-r/" target="_blank" rel="external">Titanic: Getting Started With R</a></p>
<p>（3）<a href="https://www.quora.com/What-Kaggle-competitions-should-a-beginner-start-with-1" target="_blank" rel="external">初学者应该参加哪些Kaggle比赛？</a></p>
<p>（4）<a href="https://www.quora.com/What-competition-platforms-are-there-for-different-fields-in-computer-science" target="_blank" rel="external">计算机科学领域有哪些竞争平台？</a></p>
<p>（5）<a href="https://www.zhihu.com/question/24533374" target="_blank" rel="external">参加kaggle竞赛是怎样一种体验？</a></p>
<p>（6）<a href="file:///C:/Users/Administrator.HXICBAVUV7DWEV6/Desktop/What%20are%20some%20open%20competitions%20in%20bioinformatics%20and%20genomics%20%20-%20Quora.htm" target="_blank" rel="external">生物信息学和基因组学中的一些公开竞争是什么？</a></p>
<p>（7）<a href="https://www.quora.com/What-are-the-best-universities-to-study-bioinformatics" target="_blank" rel="external">What are the best universities to study bioinformatics?</a></p>
<p>（8）<a href="https://www.biostars.org/p/164475/" target="_blank" rel="external">Question: Bioinformatic Algorithms Books</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;kaggle简介及数据竞赛相关平台&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据竞赛" scheme="https:///AnJingwd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="数据竞赛" scheme="https:///AnJingwd.github.io/tags/%E6%95%B0%E6%8D%AE%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>k_means聚类算法python实现</title>
    <link href="https:///AnJingwd.github.io/2018/05/09/k-means%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95python%E5%AE%9E%E7%8E%B0/"/>
    <id>https:///AnJingwd.github.io/2018/05/09/k-means聚类算法python实现/</id>
    <published>2018-05-09T14:04:50.000Z</published>
    <updated>2018-05-09T14:15:10.652Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">k_means聚类算法python实现，并对50个基因表达量聚类</blockquote>

<a id="more"></a>
<h2 id="k-means-聚类"><a href="#k-means-聚类" class="headerlink" title="k means 聚类"></a>k means 聚类</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>K-means算法以k为参数，把n个对象分为k个簇，使簇内具有较高的相似度，而簇间的相似度较低。</p>
<ol>
<li>随机选择K个点作为初始的聚类中心</li>
<li>对于剩下的点，根据其与聚类中心的距离，将其归入最近的簇</li>
<li>对每个簇，计算所有点的均值作为新的聚类中心</li>
<li>重复步骤2,3直到聚类中心不再变化</li>
</ol>
<h3 id="K-meas-cluster-py"><a href="#K-meas-cluster-py" class="headerlink" title="K_meas_cluster.py"></a>K_meas_cluster.py</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> math,os,random</div><div class="line"></div><div class="line"></div><div class="line">os.chdir(<span class="string">r'F:\pycharm_project\cluster'</span>)</div><div class="line">data = pd.read_csv(<span class="string">r'.\microarray_gcrma_diff_TOP50.csv'</span>,nrows = <span class="number">51</span>,header=<span class="keyword">None</span>)</div><div class="line">Exp_matrix = np.array(data.iloc[<span class="number">1</span>:<span class="number">51</span>,<span class="number">1</span>:<span class="number">3</span>],dtype =np.float64)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_k_start</span><span class="params">(A,k)</span>:</span></div><div class="line">	k_point_list = []</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,k):</div><div class="line">		random_index = random.randint(<span class="number">0</span>, A.shape[<span class="number">0</span>])</div><div class="line">		k_point_list.append(A[random_index])</div><div class="line">	<span class="keyword">return</span> k_point_list</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Euclidean_Distances</span><span class="params">(a,b)</span>:</span></div><div class="line">	d = math.sqrt((a[<span class="number">0</span>] - b[<span class="number">0</span>]) ** <span class="number">2</span> + (a[<span class="number">1</span>] - b[<span class="number">1</span>]) ** <span class="number">2</span>)</div><div class="line">	<span class="keyword">return</span> d</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span>  <span class="title">classify_points</span><span class="params">(A,center)</span>:</span></div><div class="line">	classified_list = []</div><div class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(center)):</div><div class="line">		names = locals()</div><div class="line">		names[<span class="string">'point_list%s'</span> % j] = []</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,A.shape[<span class="number">0</span>]):</div><div class="line">		dis_list = []</div><div class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(center)):</div><div class="line">			dis = Euclidean_Distances(A[i],center[j])</div><div class="line">			dis_list.append(dis)</div><div class="line">		min_dis_index =dis_list.index(min(dis_list))</div><div class="line">		names[<span class="string">'point_list%s'</span> % min_dis_index].append(A[i])</div><div class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(center)):</div><div class="line">		classified_list.append(names[<span class="string">'point_list%s'</span> % j])</div><div class="line">	<span class="keyword">return</span> classified_list</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat_new_center</span><span class="params">(mylist)</span>:</span></div><div class="line">	center_new = []</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(mylist)):</div><div class="line">		point_x_sum = <span class="number">0</span></div><div class="line">		point_y_sum = <span class="number">0</span></div><div class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(mylist[i])):</div><div class="line">			point_x_sum += mylist[i][j][<span class="number">0</span>]</div><div class="line">			point_y_sum += mylist[i][j][<span class="number">1</span>]</div><div class="line">		point_pos = [point_x_sum/len(mylist[i]),point_y_sum/len(mylist[i])]</div><div class="line">		center_new.append(point_pos)</div><div class="line">	<span class="keyword">return</span> center_new</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_mens_loop</span><span class="params">(A,k)</span>:</span></div><div class="line">	start = random_k_start(A,k)</div><div class="line">	classified_list = classify_points(A, start)</div><div class="line"></div><div class="line">	center_new = creat_new_center(classified_list)</div><div class="line">	classified_list = classify_points(A, center_new)</div><div class="line">	center_new_next = creat_new_center(classified_list)</div><div class="line"></div><div class="line">	<span class="keyword">while</span> center_new != center_new_next:</div><div class="line">		center_new = creat_new_center(classified_list)</div><div class="line">		classified_list = classify_points(A, center_new)</div><div class="line">		center_new_next= creat_new_center(classified_list)</div><div class="line">	<span class="keyword">return</span> classified_list</div><div class="line"></div><div class="line">result_k_means_cluster = k_mens_loop(Exp_matrix,<span class="number">3</span>)</div><div class="line">print(result_k_means_cluster)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_cluster_result</span><span class="params">(mylist)</span>:</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(mylist)):</div><div class="line">		print(<span class="string">"The "</span>+ str(i+<span class="number">1</span>)+<span class="string">" class include this points  "</span>+str(mylist[i]))</div><div class="line"></div><div class="line">format_cluster_result(result_k_means_cluster)</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">The 1 class include this points  [array([ 4.93486944, 13.14640868]), array([ 9.44642109, 13.35037465]), array([ 2.49151711, 10.83512875]), array([ 9.8840153 , 12.83855873]), array([ 6.00091999, 11.32824297]), array([ 7.80347201, 11.06602904]), array([ 6.68408837, 11.29720113]), array([6.13240771, 8.75948733]), array([ 7.41177163, 11.46909421]), array([ 5.81649515, 12.38062477]), array([ 7.99449013, 10.8097551 ]), array([ 7.15714487, 11.575675  ]), array([ 6.45817254, 10.02135377]), array([ 8.17631453, 10.85800827]), array([ 7.90910338, 11.01532861]), array([ 8.02190753, 13.19604362]), array([6.47480105, 9.0377897 ]), array([ 8.97900038, 11.21312381]), array([6.12469976, 9.84061508]), array([ 7.380284 , 12.1630906]), array([6.01540939, 9.75805721])]</div><div class="line"></div><div class="line">The 2 class include this points  [array([2.50308546, 5.91300188]), array([2.24197899, 9.8390274 ]), array([5.33573424, 8.07922933]), array([5.64747242, 3.61139246]), array([5.35174955, 7.57523097]), array([6.91440679, 3.1232664 ]), array([2.71849667, 4.76027382]), array([3.97446062, 8.03512416]), array([6.45228078, 2.44931761]), array([4.5782664 , 7.51644097]), array([3.99185391, 6.05134528]), array([4.06301573, 7.63789036]), array([3.89376658, 6.12632702]), array([3.09482821, 9.36668278]), array([5.30726995, 8.56688374]), array([4.33465033, 8.58483349]), array([2.64882616, 4.71169159]), array([2.23241425, 6.36768551])]</div><div class="line"></div><div class="line">The 3 class include this points  [array([14.23058515, 12.21441832]), array([10.21858224,  7.9990988 ]), array([9.07154372, 6.73460898]), array([11.34847715,  8.99124024]), array([12.4881844, 10.2497519]), array([9.97529373, 6.69985229]), array([10.97051098,  8.08711864]), array([9.90668681, 7.8113881 ]), array([9.37065246, 4.70014833]), array([8.6836169 , 6.10392713]), array([9.2391499 , 6.50016246])]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;k_means聚类算法python实现，并对50个基因表达量聚类&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="https:///AnJingwd.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https:///AnJingwd.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>层级聚类算法python实现</title>
    <link href="https:///AnJingwd.github.io/2018/05/07/%E5%B1%82%E7%BA%A7%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95python%E5%AE%9E%E7%8E%B0/"/>
    <id>https:///AnJingwd.github.io/2018/05/07/层级聚类算法python实现/</id>
    <published>2018-05-07T12:02:46.000Z</published>
    <updated>2018-05-07T12:41:57.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">python实现对50个基因表达量层级聚类算法</blockquote>

<a id="more"></a>
<h1 id="聚类算法python实现"><a href="#聚类算法python实现" class="headerlink" title="聚类算法python实现"></a>聚类算法python实现</h1><h2 id="层级聚类"><a href="#层级聚类" class="headerlink" title="层级聚类"></a>层级聚类</h2><h3 id="Hierarchical-Clustering-py"><a href="#Hierarchical-Clustering-py" class="headerlink" title="Hierarchical_Clustering.py"></a>Hierarchical_Clustering.py</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>通过50行基因，实验组和对照组两列，每组各3个重复的平均表达量，根据欧式距离计算距离矩阵DE</li>
<li>对距离矩阵进行层级聚类</li>
</ul>
<p>层级聚类算法伪代码：</p>
<p>Hierarchical_Clustering（d,n）</p>
<ol>
<li>形成n个类，每个类含有一个元素</li>
<li>构建树型图，为每个类分配一个单独的顶点</li>
<li>while 存在多于一个类</li>
<li>找到最近的两个雷C1和C2</li>
<li>将C1和C2合并成一个新的类C,Chanyou |C1|+|C2|个元素</li>
<li>计算C与其他各类的距离</li>
<li>在树形图中增加一个顶点C,且与C1和C2相连</li>
<li>在距离矩阵中删除与C1和C2相对应的行和列</li>
<li>在距离矩阵中为新类增加一行一列</li>
<li>return T</li>
</ol>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> math,os</div><div class="line"></div><div class="line">os.chdir(<span class="string">r'F:\pycharm_project\cluster'</span>)</div><div class="line">data = pd.read_csv(<span class="string">r'.\microarray_gcrma_diff_TOP50.csv'</span>,nrows = <span class="number">51</span>,header=<span class="keyword">None</span>)</div><div class="line">Exp_matrix = np.array(data.iloc[<span class="number">1</span>:<span class="number">51</span>,<span class="number">1</span>:<span class="number">3</span>],dtype =np.float64)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Euclidean_Distances</span><span class="params">(A)</span>:</span></div><div class="line">	n = A.shape[<span class="number">0</span>]</div><div class="line">	mydist = np.zeros((n, n))</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>):</div><div class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>):</div><div class="line">			d = math.sqrt((A[i][<span class="number">0</span>]-A[j][<span class="number">0</span>])**<span class="number">2</span>+(A[i][<span class="number">1</span>]-A[j][<span class="number">1</span>])**<span class="number">2</span>)</div><div class="line">			mydist[i,j] = (<span class="string">"%.2f"</span> % d)</div><div class="line">	<span class="keyword">return</span> mydist</div><div class="line"></div><div class="line">DE = Euclidean_Distances(Exp_matrix)</div><div class="line"><span class="comment">#print(DE)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_min_index_list</span><span class="params">(A)</span>:</span></div><div class="line">	<span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> A:</div><div class="line">		mask = A ==<span class="number">0</span></div><div class="line">		A[mask == <span class="keyword">True</span>] =np.inf</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">pass</span></div><div class="line">	dis_min = A.min()</div><div class="line">	dis_min_pos = np.where(A ==dis_min)</div><div class="line">	pos_list = []</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(dis_min_pos[<span class="number">0</span>])):</div><div class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(dis_min_pos[<span class="number">0</span>])):</div><div class="line">			<span class="keyword">if</span> i &gt; j:</div><div class="line">				pos_list.append([dis_min_pos[<span class="number">0</span>][i],dis_min_pos[<span class="number">1</span>][i]])</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">pass</span></div><div class="line">	<span class="keyword">return</span> pos_list</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#min_index_list = find_min_index(DE)</span></div><div class="line"><span class="comment">#print(min_index_list)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_list</span><span class="params">(mylist,index_list)</span>:</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(index_list)):</div><div class="line">		<span class="keyword">if</span> i == <span class="number">0</span>:</div><div class="line">			<span class="keyword">del</span> mylist[index_list[i]]</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">del</span> mylist[index_list[i]<span class="number">-1</span>]</div><div class="line">	<span class="keyword">return</span> mylist</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_Euclidean_min_Distances</span><span class="params">(min_index,A)</span>:</span></div><div class="line">	<span class="comment">#calculate class distance</span></div><div class="line">	min_row1 = A[min_index[<span class="number">0</span>],]</div><div class="line">	min_row2 = A[min_index[<span class="number">1</span>],]</div><div class="line">	class_dis_to_other = np.fmin(min_row1,min_row2)</div><div class="line"></div><div class="line">	<span class="comment">#delete distance list element</span></div><div class="line">	mylist = list(class_dis_to_other)</div><div class="line">	mylist_del = delete_list(mylist,list(min_index))</div><div class="line"></div><div class="line">	<span class="comment">#delete distance matrix</span></div><div class="line">	A_del_row = np.delete(A, [min_index[<span class="number">0</span>], min_index[<span class="number">1</span>]], <span class="number">0</span>)</div><div class="line">	A_del_column = np.delete(A_del_row, [min_index[<span class="number">0</span>], min_index[<span class="number">1</span>]], <span class="number">1</span>)</div><div class="line"></div><div class="line">	<span class="comment">#add distance list</span></div><div class="line">	A_add_row = np.row_stack((A_del_column,mylist_del))</div><div class="line">	mylist_del.append(np.inf)</div><div class="line">	A_add_column = np.column_stack((A_add_row,mylist_del ))</div><div class="line">	<span class="keyword">return</span> A_add_column</div><div class="line"></div><div class="line"><span class="comment">#min_index = split_min_index(min_index_list)</span></div><div class="line"><span class="comment">#DE_new = class_Euclidean_min_Distances(min_index,DE)</span></div><div class="line"><span class="comment">#print(DE_new)</span></div><div class="line"></div><div class="line"><span class="comment">#min_index_list = find_min_index(A)</span></div><div class="line"><span class="comment">#min_index = split_min_index(min_index_list)</span></div><div class="line"><span class="comment">#A = class_Euclidean_min_Distances(min_index[0],A)</span></div><div class="line"><span class="comment">#A = class_Euclidean_min_Distances(min_index[1],A)</span></div><div class="line"><span class="comment">#print(A)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hierarchical_clustering</span><span class="params">(A,N)</span>:</span></div><div class="line">	n_class = len(A)</div><div class="line">	n_layer = <span class="number">1</span></div><div class="line">	<span class="keyword">while</span> n_class &gt; N:</div><div class="line">		min_index_list = find_min_index_list(A)</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,int(len(min_index_list))):</div><div class="line">			A = class_Euclidean_min_Distances(min_index_list[i], A)</div><div class="line">			result = <span class="string">"the "</span> + str(n_layer) + <span class="string">" layer class process is "</span> + <span class="string">"&#123;g"</span> + str(</div><div class="line">				min_index_list[i][<span class="number">0</span>]) + <span class="string">","</span> + <span class="string">"g"</span> + str(min_index_list[i][<span class="number">1</span>]) + <span class="string">"&#125;"</span> + <span class="string">"---&gt;"</span> + <span class="string">"g"</span> + str(n_class<span class="number">-1</span>)</div><div class="line">			n_class = n_class - <span class="number">1</span></div><div class="line">			print(result)</div><div class="line">		n_layer +=<span class="number">1</span></div><div class="line">	<span class="keyword">return</span> A</div><div class="line"></div><div class="line"> A = hierarchical_clustering(DE,<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h3 id="Hierarchical-Clustering输出结果及解释"><a href="#Hierarchical-Clustering输出结果及解释" class="headerlink" title="Hierarchical_Clustering输出结果及解释"></a>Hierarchical_Clustering输出结果及解释</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">the 1 layer class process is &#123;g38,g17&#125;---&gt;g49</div><div class="line">the 2 layer class process is &#123;g48,g16&#125;---&gt;g48</div><div class="line">the 3 layer class process is &#123;g47,g15&#125;---&gt;g47</div><div class="line">the 4 layer class process is &#123;g46,g14&#125;---&gt;g46</div><div class="line">the 5 layer class process is &#123;g45,g13&#125;---&gt;g45</div><div class="line">the 6 layer class process is &#123;g44,g12&#125;---&gt;g44</div><div class="line">the 7 layer class process is &#123;g43,g11&#125;---&gt;g43</div><div class="line">the 8 layer class process is &#123;g42,g10&#125;---&gt;g42</div><div class="line">the 9 layer class process is &#123;g41,g9&#125;---&gt;g41</div><div class="line">the 10 layer class process is &#123;g40,g8&#125;---&gt;g40</div><div class="line">the 11 layer class process is &#123;g39,g7&#125;---&gt;g39</div><div class="line">the 12 layer class process is &#123;g38,g6&#125;---&gt;g38</div><div class="line">the 13 layer class process is &#123;g37,g5&#125;---&gt;g37</div><div class="line">the 14 layer class process is &#123;g36,g4&#125;---&gt;g36</div><div class="line">the 15 layer class process is &#123;g35,g3&#125;---&gt;g35</div><div class="line">the 16 layer class process is &#123;g34,g2&#125;---&gt;g34</div><div class="line">the 17 layer class process is &#123;g33,g1&#125;---&gt;g33</div><div class="line">the 18 layer class process is &#123;g32,g0&#125;---&gt;g32</div><div class="line">the 19 layer class process is &#123;g31,g0&#125;---&gt;g31</div><div class="line">the 20 layer class process is &#123;g30,g0&#125;---&gt;g30</div><div class="line">the 21 layer class process is &#123;g29,g0&#125;---&gt;g29</div><div class="line">the 22 layer class process is &#123;g28,g0&#125;---&gt;g28</div><div class="line">the 23 layer class process is &#123;g27,g0&#125;---&gt;g27</div><div class="line">the 24 layer class process is &#123;g26,g0&#125;---&gt;g26</div><div class="line">the 25 layer class process is &#123;g25,g0&#125;---&gt;g25</div><div class="line">the 26 layer class process is &#123;g24,g0&#125;---&gt;g24</div><div class="line">the 27 layer class process is &#123;g23,g0&#125;---&gt;g23</div><div class="line">the 28 layer class process is &#123;g22,g0&#125;---&gt;g22</div><div class="line">the 29 layer class process is &#123;g21,g0&#125;---&gt;g21</div><div class="line">the 30 layer class process is &#123;g20,g0&#125;---&gt;g20</div><div class="line">the 31 layer class process is &#123;g19,g0&#125;---&gt;g19</div><div class="line">the 32 layer class process is &#123;g18,g0&#125;---&gt;g18</div><div class="line">the 33 layer class process is &#123;g17,g0&#125;---&gt;g17</div><div class="line">the 34 layer class process is &#123;g16,g0&#125;---&gt;g16</div><div class="line">the 35 layer class process is &#123;g15,g0&#125;---&gt;g15</div><div class="line">the 36 layer class process is &#123;g14,g0&#125;---&gt;g14</div><div class="line">the 37 layer class process is &#123;g13,g0&#125;---&gt;g13</div><div class="line">the 38 layer class process is &#123;g12,g0&#125;---&gt;g12</div><div class="line">the 39 layer class process is &#123;g11,g0&#125;---&gt;g11</div><div class="line">the 40 layer class process is &#123;g10,g0&#125;---&gt;g10</div><div class="line">the 41 layer class process is &#123;g9,g0&#125;---&gt;g9</div><div class="line">the 42 layer class process is &#123;g8,g0&#125;---&gt;g8</div><div class="line">the 43 layer class process is &#123;g7,g0&#125;---&gt;g7</div><div class="line">the 44 layer class process is &#123;g6,g0&#125;---&gt;g6</div><div class="line">the 45 layer class process is &#123;g5,g0&#125;---&gt;g5</div><div class="line">the 46 layer class process is &#123;g4,g0&#125;---&gt;g4</div><div class="line">the 47 layer class process is &#123;g3,g0&#125;---&gt;g3</div><div class="line">the 48 layer class process is &#123;g2,g0&#125;---&gt;g2</div><div class="line">the 49 layer class process is &#123;g1,g0&#125;---&gt;g1</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;层级聚类过程为：例如{g38,g17}—&gt;g49  表示原50个基因列表中第38个基因和第17个基因聚为一类，插入到剩下48个基因的末尾，作为新的第49个“基因”。以此类推，每次对两个基因聚为一类，插到剩下基因的末尾。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;python实现对50个基因表达量层级聚类算法&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="https:///AnJingwd.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https:///AnJingwd.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hisat2构建GRCH38转录组index内存不足</title>
    <link href="https:///AnJingwd.github.io/2018/04/19/hisat2%E6%9E%84%E5%BB%BAGRCH38%E8%BD%AC%E5%BD%95%E7%BB%84index%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3/"/>
    <id>https:///AnJingwd.github.io/2018/04/19/hisat2构建GRCH38转录组index内存不足/</id>
    <published>2018-04-19T02:09:54.000Z</published>
    <updated>2018-04-19T02:20:43.828Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">hisat2构建GRCH38转录组index内存不足</blockquote>

<a id="more"></a>
<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p>Ran out of memory; auhisat2 tomatically trying more memory-economical parameters</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>首先查看hisat2官网的manual,可以看到这样一句话：</p>
<p><strong>If you use –snp, –ss, and/or –exon, hisat2-build will need about 200GB RAM for the human genome size as index building involves a graph construction.<br>Otherwise, you will be able to build an index on your desktop with 8GB RAM.</strong></p>
<p>同时注意到参数–known-splicesite-infile:</p>
<p>With this mode, you can provide a list of known splice sites, which HISAT2 makes use of to align reads with small anchors.</p>
<p>You can create such a list using python hisat2_extract_splice_sites.py genes.gtf &gt; splicesites.txt, where hisat2_extract_splice_sites.py is included in the HISAT2 package, genes.gtf is a gene annotation file, and splicesites.txt is a list of splice sites with which you provide HISAT2 in this mode. Note that it is better to use indexes built using annotated transcripts (such as genome_tran or genome_snp_tran), which works better than using this option. It has no effect to provide splice sites that are already included in the indexes.</p>
<p>所以有两种解决方式：第一种可以申请更多的内存资源重新建索引；第二种，可以在建索引的时候不加可变剪切位点，在比对的时候提供，但效果不如第一种好。</p>
<h1 id="查看节点可用内存"><a href="#查看节点可用内存" class="headerlink" title="查看节点可用内存"></a>查看节点可用内存</h1><p>使用top命令查看：</p>
<p><img src="https://i.imgur.com/2secSKs.jpg" alt=""></p>
<p>如果出于习惯去计算可用内存数，这里有个近似的计算公式：第四行的free + 第四行的buffers + 第五行的cached，按这个公式此台服务器的可用内存：530668+79236+4231276 = 4.7GB</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;hisat2构建GRCH38转录组index内存不足&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NGS" scheme="https:///AnJingwd.github.io/categories/NGS/"/>
    
    
      <category term="NGS" scheme="https:///AnJingwd.github.io/tags/NGS/"/>
    
  </entry>
  
  <entry>
    <title>任务提交系统使用</title>
    <link href="https:///AnJingwd.github.io/2018/04/05/%E4%BB%BB%E5%8A%A1%E6%8F%90%E4%BA%A4%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8/"/>
    <id>https:///AnJingwd.github.io/2018/04/05/任务提交系统使用/</id>
    <published>2018-04-05T02:07:10.000Z</published>
    <updated>2018-11-19T06:41:39.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">任务提交系统使用</blockquote>

<a id="more"></a>
<h1 id="什么是批处理作业调度程序？"><a href="#什么是批处理作业调度程序？" class="headerlink" title="什么是批处理作业调度程序？"></a>什么是批处理作业调度程序？</h1><p>&emsp;&emsp;大多数现有的高性能计算集群都由作业调度程序管理; 也称为批量调度程序，工作负载管理器，排队系统或负载均衡器。调度程序允许多个用户公平地共享计算节点，允许系统管理员控制资源如何提供给不同用户组。所有调度程序都设计用于执行以下功能：</p>
<ul>
<li>允许用户向集群提交新作业</li>
<li>允许用户监视其排队和正在运行的作业的状态</li>
<li>允许用户和系统管理员控制正在运行的作业</li>
<li>监控受管资源的状态，包括系统负载，可用内存等</li>
</ul>
<p>&emsp;&emsp;当用户提交新作业时，群集调度程序软件将分配计算核心和内存以满足作业要求。如果合适的资源不可用于运行作业，则调度程序会将作业添加到队列中，直到有足够的资源可用于作业运行。您可以配置调度程序来控制如何从队列中选择作业并在集群节点上执行作业，包括自动准备节点以运行并行MPI作业。作业完成运行后，调度程序将作业使用的资源返回到可用资源池，准备运行其他用户作业。</p>
<h2 id="计算作业的类型"><a href="#计算作业的类型" class="headerlink" title="计算作业的类型"></a>计算作业的类型</h2><p>用户可以通过集群调度程序运行多种不同类型的作业，其中包括：</p>
<ul>
<li>批量作业 ; 单线程应用程序只能在一个计算核心上运行</li>
<li>阵列作业 ; 为方便起见，将两个或多个类似的批处理作业一起提交</li>
<li>SMP或多线程的工作; 在同一个计算节点上的两个或多个计算核心上运行的多线程应用程序</li>
<li>并行作业 ; 多线程应用程序利用MPI库在分布在一个或多个计算节点上的多个内核上运行</li>
</ul>
<p>&emsp;&emsp;集群作业调度程序负责查找集群中的计算节点以运行所有这些不同类型的作业。它会跟踪可用资源并将作业分配给各个节点组，确保不会过度提交CPU和内存。以下示例显示了作业调度程序如何将不同类型的作业分配给一组8-CPU核心计算节点：</p>
<p><img src="https://i.imgur.com/YGgb9H6.jpg" alt=""></p>
<h2 id="交互式和批处理作业"><a href="#交互式和批处理作业" class="headerlink" title="交互式和批处理作业"></a>交互式和批处理作业</h2><p>用户通常通过运行交互式或批处理（也称为非交互式）作业与计算集群进行交互。</p>
<ul>
<li>交互式作业是用户通过图形界面或通过在命令提示符处键入来直接控制的作业。</li>
<li>通过编写传递给计算节点的指令列表来运行批处理作业，以便将来在某个时刻运行。</li>
</ul>
<h2 id="为什么在个人群集上使用作业调度程序？"><a href="#为什么在个人群集上使用作业调度程序？" class="headerlink" title="为什么在个人群集上使用作业调度程序？"></a>为什么在个人群集上使用作业调度程序？</h2><p>&emsp;&emsp;在共享的多用户群集上，作业调度程序通常用作控制机制，以确保用户不会不公平地垄断有价值的计算资源。在极端情况下，系统管理员可能会使用调度程序强制在共享环境中执行“良好行为”，并且可能感觉像对集群用户进行强制操作。</p>
<p>通过您自己的个人群集，您可以直接控制可用于工作的资源 - 不需要工作调度程序来限制您的使用。</p>
<p>然而 - 有很多原因可以使你自己的作业调度程序在你的群集中仍然是一个有用的工具：</p>
<ul>
<li>它可以帮助您组织多阶段工作流程，批量作业在定义的过程中启动后续作业。</li>
<li>它可以自动启动MPI作业，找到可用的节点来运行应用程序。</li>
<li>它可以帮助防止意外地过度分配CPU或内存，这可能会导致节点故障。</li>
<li>它可以帮助将纪律带入环境，提供一致的方法来复制不同环境中的作业运行。</li>
<li>在调度程序中排队的作业可以用来触发扩大您的群集的大小，在没有作业运行时从群集中释放计算节点，为您节省成本。</li>
</ul>
<h2 id="可用的群集作业调度程序"><a href="#可用的群集作业调度程序" class="headerlink" title="可用的群集作业调度程序"></a>可用的群集作业调度程序</h2><ul>
<li>开放网格调度器（SGE） - 一种开源的作业调度器，由最初的Sun Grid Engine（SGE）代码库构建而成，</li>
<li>OpenLava调度程序（类似于IBM LSF）</li>
<li>转矩调度器</li>
<li>PBS Pro调度程序</li>
</ul>
<h2 id="作业调度系统"><a href="#作业调度系统" class="headerlink" title="作业调度系统"></a>作业调度系统</h2><ul>
<li>SLURM（简单Linux资源管理实用程序）是全球超级计算机中心采用的可扩展工作负载管理器。<strong>它是免费的并且是开源的，在通用公共许可证下发布。</strong></li>
<li>IBM®Platform™LSF®是一款功能强大的工作负载管理平台，适用于要求苛刻的分布式HPC环境。它提供了一套全面的智能策略驱动调度功能，使您能够利用所有计算基础架构资源并确保最佳的应用程序性能。</li>
</ul>
<p><img src="https://i.imgur.com/Y1DqlC0.jpg" alt=""></p>
<p><a href="http://scc.ustc.edu.cn/yhsq/sycjwt/201406/lsf_using.html" target="_blank" rel="external">LSF作业调度系统用户使用常见问题（推荐）</a></p>
<h3 id="SLURM作业调度系统常用命令"><a href="#SLURM作业调度系统常用命令" class="headerlink" title="SLURM作业调度系统常用命令"></a>SLURM作业调度系统常用命令</h3><p><a href="https://pi.sjtu.edu.cn/doc/slurm/" target="_blank" rel="external">SLURM manual</a></p>
<ul>
<li>sinfo 查看各个节点的状态，资源是否充足，当前有多少正在执行的任务</li>
</ul>
<p>&emsp;&emsp;使用 sinfo 可粗略查看所有分区的节点信息，注意 ‘‘STATE’’ 一栏的输出 若为 ‘‘idle’’ 表示该节点处于闲置状态，若为 ‘‘alloc’’ 表示该节点已经没有多余的 资源了，若为 ‘‘mix’’ 表示该节点有人在占用，但是仍然有剩余资源。</p>
<ul>
<li><p>作业提交完毕后，可使用 squeue 命令查看任务状态</p>
<p>  squeue -l: 以长列表显示更多信息。<br>  squeue -u username: 仅显示属于用户 username 的任务。<br>  squeue -t state: 仅显示处于 state 状态的任务。</p>
</li>
</ul>
<p>&emsp;&emsp;ps: ST 表示当前状态，R是Runing的简写</p>
<ul>
<li><p>salloc [申请资源]</p>
<p>  salloc -N 1 –cpus-per-task=4 或者 srun -N1 -n1 hostname<br>  squeue 查看任务情况，获取分配节点，然后使用ssh 节点进行切换</p>
</li>
</ul>
<h3 id="OpenLava调度程序常用命令"><a href="#OpenLava调度程序常用命令" class="headerlink" title="OpenLava调度程序常用命令"></a>OpenLava调度程序常用命令</h3><p><a href="http://docs.alces-flight.com/en/stable/openlava/openlava.html" target="_blank" rel="external">openlava manual</a> </p>
<p>该OpenLava集群作业调度是一个开源平台的IBM兼容LSF作业调度程序。</p>
<ul>
<li><p>运行交互式作业</p>
<p>  bsub -Is bash</p>
<ul>
<li>-Is：Submits an interactive job and creates a pseudo-terminal when the job starts</li>
<li>bash：Choose the shell type to use when creating the interactive job</li>
</ul>
</li>
<li><p>提交批处理作业</p>
<p>  bsub -o $HOME/jobout.txt &lt; simplejobscript.sh</p>
<p>  #jobout.txt  用于记录任何job输出</p>
<p>  -J JOB_name 设置任务名</p>
<p>  -n number of cores</p>
<p>  simplejobscript.sh</p>
  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/bash -l</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Starting running on host <span class="variable">$HOSTNAME</span>"</span></div><div class="line">sleep 120</div><div class="line"><span class="built_in">echo</span> <span class="string">"Finished running - goodbye from <span class="variable">$HOSTNAME</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看和控制排队任务</p>
<ul>
<li>bjobs 查看任务的状态和排队情况，显示RUN（在运行）或者PEND(等待)</li>
<li>bkill JOBID 杀任务，无论任务处在运行或者排队状态</li>
<li>bhosts查看计算节点的状态, -l查看更详细的信息</li>
</ul>
</li>
<li><p>运行多线程作业</p>
<p>  如果用户想要在计算节点上使用多个内核来运行多线程应用程序，可以使用</p>
<pre><code>-n number of cores
</code></pre></li>
</ul>
<p>&emsp;&emsp;ps: 之前都是ssh node命令切换到计算节点再跑流程，有了集群作业调度程序就可以在登陆节点提交任务，其将自动分配计算节点资源，不包括登陆节点。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="http://blog.sina.com.cn/s/blog_62db9b190101eptz.html" target="_blank" rel="external">bsub更多使用例子</a></p>
<p>（2）[OpenLava Installation Procedure](<a href="http://docplayer.net/35369468-Openlava-installation-procedure.html" target="_blank" rel="external">http://docplayer.net/35369468-Openlava-installation-procedure.html</a></p>
<p>（3）<a href="http://bicmr.pku.edu.cn/~wenzw/pages/batch.html" target="_blank" rel="external">工作站使用指南（推荐）</a></p>
<p>（4）<a href="https://pi.sjtu.edu.cn/doc/slurm/" target="_blank" rel="external">SLURM作业调度系统（推荐）</a></p>
<p>（5）<a href="https://hpc.sjtu.edu.cn/info/1013/1539.htm" target="_blank" rel="external">交大高性能计算中心</a></p>
<p>（6）<a href="https://www.jianshu.com/p/2f6c799ca147" target="_blank" rel="external">PBS 作业管理系统</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;任务提交系统使用&lt;/blockquote&gt;
    
    </summary>
    
      <category term="linux" scheme="https:///AnJingwd.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https:///AnJingwd.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>HMM与viterbi算法</title>
    <link href="https:///AnJingwd.github.io/2018/04/03/HMM%E4%B8%8Eviterbi%E7%AE%97%E6%B3%95/"/>
    <id>https:///AnJingwd.github.io/2018/04/03/HMM与viterbi算法/</id>
    <published>2018-04-03T02:03:20.000Z</published>
    <updated>2018-07-08T01:18:00.631Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">维特比算法python实现</blockquote>

<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>&emsp;&emsp;维特比算法是一种动态规划算法用于寻找最有可能产生观测事件序列的-维特比路径-隐含状态序列，特别是在马尔可夫信息源上下文和隐马尔可夫模型中。</p>
<p><img src="https://i.imgur.com/792wDjb.png" alt=""></p>
<h1 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">seq = <span class="string">'THHTHTTTHHHHHTTTHHHHHHHTHHTHHH'</span></div><div class="line">coins = (<span class="string">'F'</span>,<span class="string">'B'</span>)</div><div class="line"></div><div class="line">coin_start_probability = &#123;</div><div class="line">    <span class="string">'F'</span> : <span class="number">1</span>,</div><div class="line">    <span class="string">'B'</span> : <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">dealer_switch_probability = &#123;</div><div class="line">    <span class="string">'F'</span> : &#123;<span class="string">'F'</span>: <span class="number">0.99</span>, <span class="string">'B'</span>: <span class="number">0.01</span>&#125;,</div><div class="line">    <span class="string">'B'</span>: &#123;<span class="string">'F'</span> : <span class="number">0</span>, <span class="string">'B'</span>: <span class="number">0.95</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">flip_probability = &#123;</div><div class="line">    <span class="string">'F'</span> : &#123;<span class="string">'H'</span>:<span class="number">0.5</span>, <span class="string">'T'</span>:<span class="number">0.5</span>&#125;,</div><div class="line">    <span class="string">'B'</span> : &#123;<span class="string">'H'</span>:<span class="number">0.8</span>, <span class="string">'T'</span>:<span class="number">0.2</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">trace_F_way = &#123;</div><div class="line">    <span class="string">'0'</span> : <span class="string">'FF'</span>,</div><div class="line">    <span class="string">'1'</span> : <span class="string">'BF'</span></div><div class="line">&#125;</div><div class="line">trace_F_list = []</div><div class="line"></div><div class="line"></div><div class="line">trace_B_way = &#123;</div><div class="line">    <span class="string">'0'</span> : <span class="string">'FB'</span>,</div><div class="line">    <span class="string">'1'</span> : <span class="string">'BB'</span></div><div class="line">&#125;</div><div class="line">trace_B_list = []</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">path_traceback</span><span class="params">(trace_F_list,trace_B_list)</span>:</span></div><div class="line">    trace = [<span class="string">'B'</span>,]</div><div class="line">    trace_reverse = [<span class="string">'F'</span>,]</div><div class="line">    N = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(trace_F_list)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</div><div class="line">        <span class="keyword">if</span> trace_B_list[i][<span class="number">0</span>] != trace_F_list[i<span class="number">-1</span>][<span class="number">1</span>]:</div><div class="line">            trace.append(trace_B_list[i<span class="number">-1</span>][<span class="number">0</span>])</div><div class="line">        <span class="keyword">else</span> :</div><div class="line">            N = i</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N,<span class="number">0</span>,<span class="number">-1</span>):</div><div class="line">        trace.append(<span class="string">'F'</span>)</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(trace)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</div><div class="line">        trace_reverse.append(trace[j])</div><div class="line">    <span class="keyword">return</span> trace_reverse</div><div class="line"></div><div class="line"></div><div class="line">path_max = <span class="number">1</span></div><div class="line">path_min = <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(seq)):</div><div class="line">    print(seq[i])</div><div class="line">    </div><div class="line">    trans_FF = dealer_switch_probability[<span class="string">'F'</span>][<span class="string">'F'</span>]*flip_probability[<span class="string">'F'</span>][str(seq[i<span class="number">-1</span>])]</div><div class="line">    trans_BF = dealer_switch_probability[<span class="string">'B'</span>][<span class="string">'F'</span>]*flip_probability[<span class="string">'B'</span>][str(seq[i<span class="number">-1</span>])]</div><div class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</div><div class="line">            path_F = max(trans_FF*coin_start_probability[<span class="string">'F'</span>],trans_BF*coin_start_probability[<span class="string">'B'</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">            path_F = max(trans_FF*path_max,trans_BF*path_min)</div><div class="line">            </div><div class="line">    trace_F = [trans_FF*path_max,trans_BF*path_min].index(path_F)</div><div class="line">    print(trace_F_way[str(trace_F)])</div><div class="line">    trace_F_list.append(trace_F_way[str(trace_F)])</div><div class="line">    </div><div class="line">    trans_FB = dealer_switch_probability[<span class="string">'F'</span>][<span class="string">'B'</span>]*flip_probability[<span class="string">'F'</span>][str(seq[i<span class="number">-1</span>])]</div><div class="line">    trans_BB = dealer_switch_probability[<span class="string">'B'</span>][<span class="string">'B'</span>]*flip_probability[<span class="string">'B'</span>][str(seq[i<span class="number">-1</span>])]</div><div class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</div><div class="line">            path_B = max(trans_FB*coin_start_probability[<span class="string">'F'</span>], trans_FB*coin_start_probability[<span class="string">'B'</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">            path_B = max(trans_FB*path_max, trans_BB*path_min)</div><div class="line">    trace_B = [trans_FB*path_max,trans_BB*path_min].index(path_B)</div><div class="line">    print(trace_B_way[str(trace_B)])</div><div class="line">    trace_B_list.append(trace_B_way[str(trace_B)])</div><div class="line">    </div><div class="line">    path_max = max(path_F,path_B)</div><div class="line">    path_min = min(path_F,path_B)</div><div class="line">    print(path_F)</div><div class="line">    print(path_B)</div><div class="line">    print(path_max) </div><div class="line">    print()</div><div class="line">    </div><div class="line">    </div><div class="line">        </div><div class="line">print(trace_F_list)</div><div class="line">print(trace_B_list)</div><div class="line">print(path_traceback(trace_F_list,trace_B_list))</div></pre></td></tr></table></figure>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">FB</div><div class="line"><span class="number">0.495</span></div><div class="line"><span class="number">0.005</span></div><div class="line"><span class="number">0.495</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">0.245025</span></div><div class="line"><span class="number">0.0038</span></div><div class="line"><span class="number">0.245025</span></div><div class="line"></div><div class="line">T</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">0.12128737499999999</span></div><div class="line"><span class="number">0.002888</span></div><div class="line"><span class="number">0.12128737499999999</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">FB</div><div class="line"><span class="number">0.060037250625</span></div><div class="line"><span class="number">0.000606436875</span></div><div class="line"><span class="number">0.060037250625</span></div><div class="line"></div><div class="line">T</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">0.029718439059374997</span></div><div class="line"><span class="number">0.00046089202499999997</span></div><div class="line"><span class="number">0.029718439059374997</span></div><div class="line"></div><div class="line">T</div><div class="line">FF</div><div class="line">FB</div><div class="line"><span class="number">0.014710627334390623</span></div><div class="line"><span class="number">0.000148592195296875</span></div><div class="line"><span class="number">0.014710627334390623</span></div><div class="line"></div><div class="line">T</div><div class="line">FF</div><div class="line">FB</div><div class="line"><span class="number">0.007281760530523359</span></div><div class="line"><span class="number">7.355313667195311e-05</span></div><div class="line"><span class="number">0.007281760530523359</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">FB</div><div class="line"><span class="number">0.0036044714626090623</span></div><div class="line"><span class="number">3.64088026526168e-05</span></div><div class="line"><span class="number">0.0036044714626090623</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">0.0017842133739914858</span></div><div class="line"><span class="number">2.7670690015988765e-05</span></div><div class="line"><span class="number">0.0017842133739914858</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">0.0008831856201257854</span></div><div class="line"><span class="number">2.1029724412151462e-05</span></div><div class="line"><span class="number">0.0008831856201257854</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">0.0004371768819622638</span></div><div class="line"><span class="number">1.5982590553235112e-05</span></div><div class="line"><span class="number">0.0004371768819622638</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">0.00021640255657132059</span></div><div class="line"><span class="number">1.2146768820458686e-05</span></div><div class="line"><span class="number">0.00021640255657132059</span></div><div class="line"></div><div class="line">T</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">0.00010711926550280369</span></div><div class="line"><span class="number">9.231544303548602e-06</span></div><div class="line"><span class="number">0.00010711926550280369</span></div><div class="line"></div><div class="line">T</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">5.3024036423887824e-05</span></div><div class="line"><span class="number">1.7539934176742344e-06</span></div><div class="line"><span class="number">5.3024036423887824e-05</span></div><div class="line"></div><div class="line">T</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">2.6246898029824473e-05</span></div><div class="line"><span class="number">3.3325874935810454e-07</span></div><div class="line"><span class="number">2.6246898029824473e-05</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">FB</div><div class="line"><span class="number">1.2992214524763114e-05</span></div><div class="line"><span class="number">1.3123449014912237e-07</span></div><div class="line"><span class="number">1.2992214524763114e-05</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">6.431146189757741e-06</span></div><div class="line"><span class="number">9.9738212513333e-08</span></div><div class="line"><span class="number">6.431146189757741e-06</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">3.183417363930082e-06</span></div><div class="line"><span class="number">7.580104151013309e-08</span></div><div class="line"><span class="number">3.183417363930082e-06</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">1.5757915951453906e-06</span></div><div class="line"><span class="number">5.760879154770115e-08</span></div><div class="line"><span class="number">1.5757915951453906e-06</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">7.800168395969683e-07</span></div><div class="line"><span class="number">4.3782681576252876e-08</span></div><div class="line"><span class="number">7.800168395969683e-07</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">3.861083356004993e-07</span></div><div class="line"><span class="number">3.3274837997952185e-08</span></div><div class="line"><span class="number">3.861083356004993e-07</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">1.9112362612224716e-07</span></div><div class="line"><span class="number">2.528887687844366e-08</span></div><div class="line"><span class="number">1.9112362612224716e-07</span></div><div class="line"></div><div class="line">T</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">9.460619493051234e-08</span></div><div class="line"><span class="number">1.9219546427617182e-08</span></div><div class="line"><span class="number">9.460619493051234e-08</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">4.683006649060361e-08</span></div><div class="line"><span class="number">3.6517138212472648e-09</span></div><div class="line"><span class="number">4.683006649060361e-08</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">2.3180882912848787e-08</span></div><div class="line"><span class="number">2.7753025041479213e-09</span></div><div class="line"><span class="number">2.3180882912848787e-08</span></div><div class="line"></div><div class="line">T</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">1.147453704186015e-08</span></div><div class="line"><span class="number">2.10922990315242e-09</span></div><div class="line"><span class="number">1.147453704186015e-08</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">5.679895835720774e-09</span></div><div class="line"><span class="number">4.0075368159895986e-10</span></div><div class="line"><span class="number">5.679895835720774e-09</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">2.811548438681783e-09</span></div><div class="line"><span class="number">3.045727980152095e-10</span></div><div class="line"><span class="number">2.811548438681783e-09</span></div><div class="line"></div><div class="line">H</div><div class="line">FF</div><div class="line">BB</div><div class="line"><span class="number">1.3917164771474826e-09</span></div><div class="line"><span class="number">2.3147532649155923e-10</span></div><div class="line"><span class="number">1.3917164771474826e-09</span></div><div class="line"></div><div class="line">[<span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>, <span class="string">'FF'</span>]</div><div class="line">[<span class="string">'FB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'FB'</span>, <span class="string">'BB'</span>, <span class="string">'FB'</span>, <span class="string">'FB'</span>, <span class="string">'FB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'FB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>, <span class="string">'BB'</span>]</div><div class="line">[<span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'F'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>]</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="http://www.davidsbatista.net/assets/documents/posts/2017-11-12-hmm_viterbi_mini_example.pdf" target="_blank" rel="external">Hidden Markov Model inference with the Viterbi algorithm: a mini-example（推荐）</a></p>
<p>（2）<a href="https://www.jianshu.com/p/218c1e4f0891" target="_blank" rel="external">viterbi算法：利用动态规划寻找最短路径（推荐）</a></p>
<p>（3）<a href="https://www.cnblogs.com/skyme/p/4651331.html" target="_blank" rel="external">一文搞懂HMM</a></p>
<p>（4）<a href="http://wulc.me/2017/07/14/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98%E5%8F%8A%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/" target="_blank" rel="external">隐马尔可夫模型的三大问题及求解方法</a></p>
<p>（5）<a href="http://wulc.me/2017/03/02/%E7%BB%B4%E7%89%B9%E6%AF%94%E7%AE%97%E6%B3%95/" target="_blank" rel="external">维特比算法</a></p>
<p>（6）<a href="https://zh.wikipedia.org/wiki/%E7%BB%B4%E7%89%B9%E6%AF%94%E7%AE%97%E6%B3%95" target="_blank" rel="external">维特比算法wiki</a></p>
<p>（7）<a href="https://github.com/StephHippo/viterbi" target="_blank" rel="external">StephHippo/viterbi</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;维特比算法python实现&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="https:///AnJingwd.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https:///AnJingwd.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划求序列最大得分连续子序列</title>
    <link href="https:///AnJingwd.github.io/2018/03/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B1%82%E5%BA%8F%E5%88%97%E6%9C%80%E5%A4%A7%E5%BE%97%E5%88%86%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https:///AnJingwd.github.io/2018/03/25/动态规划求序列最大得分连续子序列/</id>
    <published>2018-03-25T12:31:19.000Z</published>
    <updated>2018-03-25T13:53:52.334Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">动态规划求序列最大得分连续子序列（MSS）</blockquote>

<a id="more"></a>
<p>Given the single-letter scoring system and sequence shown below:</p>
<p>A = +2,    C = -1,    G = -4,    T = +2</p>
<p>TTACTGCGCCTTATAGCTATACGCTGTCGATCTGCGCAATTCCCCCCAATATCCCTCGGTTGATATTAC</p>
<p>A.    What is the maximum segment score?<br>B.    What are the start and end points of the maximum-scoring segment(MSS)?</p>
<h1 id="calculateMaxSumOfSubArray-py"><a href="#calculateMaxSumOfSubArray-py" class="headerlink" title="calculateMaxSumOfSubArray.py"></a>calculateMaxSumOfSubArray.py</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">letter2arr</span><span class="params">(mystr)</span>:</span></div><div class="line">    score_matrix = &#123;<span class="string">'A'</span>: <span class="number">2</span>,<span class="string">'C'</span>: <span class="number">-1</span>,<span class="string">'G'</span>: <span class="number">-4</span>,<span class="string">'T'</span>: <span class="number">2</span>,&#125;</div><div class="line">    arr_list = []</div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list(mystr):</div><div class="line">        arr_list.append(score_matrix[i])</div><div class="line">        sum += score_matrix[i]</div><div class="line">    print(<span class="string">"str score sum is :"</span>,sum)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> arr_list</div><div class="line"></div><div class="line">mystr=<span class="string">'TTACTGCGCCTTATAGCTATACGCTGTCGATCTGCGCAATTCCCCCCAATATCCCTCGGTTGATATTAC'</span></div><div class="line">print(<span class="string">"arr:"</span>,letter2arr(mystr))</div><div class="line"></div><div class="line">      </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculateMaxSumOfSubArray</span><span class="params">(arr)</span>:</span></div><div class="line">    flag = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</div><div class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span>:</div><div class="line">            flag +=<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</div><div class="line">        print(<span class="string">"start_pos (base from 0):"</span>,arr.index(max(arr)),<span class="string">"start:"</span>,max(arr))</div><div class="line">        print(<span class="string">"end_pos (base from 0)"</span>,arr.index(max(arr)),<span class="string">"end:"</span>,max(arr))</div><div class="line">        <span class="keyword">return</span> max(arr)</div><div class="line">    <span class="keyword">else</span>:          </div><div class="line">        l = g = <span class="number">-100000</span></div><div class="line">        g_max = <span class="number">-100000</span></div><div class="line">        sum = <span class="number">0</span></div><div class="line">        sum_min = <span class="number">0</span></div><div class="line">        start = <span class="number">0</span></div><div class="line">        end = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(arr)):</div><div class="line">            l = max(arr[i],l+arr[i])</div><div class="line">            g = max(l,g)</div><div class="line">            sum +=arr[i]</div><div class="line">            <span class="keyword">if</span> sum &lt; sum_min:</div><div class="line">                sum_min = sum</div><div class="line">                start = arr[i+<span class="number">1</span>] </div><div class="line">                start_pos = i + <span class="number">1</span></div><div class="line">            <span class="keyword">if</span>  g &gt; g_max:</div><div class="line">                g_max = g</div><div class="line">                end = arr[i]</div><div class="line">                end_pos = i</div><div class="line">        print(<span class="string">"start_pos (base from 0):"</span>,start_pos,<span class="string">"start:"</span>,start)</div><div class="line">        print(<span class="string">"end_pos (base from 0)"</span>,end_pos,<span class="string">"end:"</span>,end)</div><div class="line">        <span class="keyword">return</span> g</div><div class="line"></div><div class="line">arr = letter2arr(mystr)</div><div class="line">print(<span class="string">"max sum is:"</span>, calculateMaxSumOfSubArray(arr))</div><div class="line"></div><div class="line"><span class="comment">#after you get start and end </span></div><div class="line">start = <span class="number">37</span></div><div class="line">end = <span class="number">67</span></div><div class="line">print(<span class="string">"maximum-scoring segment(MSS) is:"</span>,mystr[start:end+<span class="number">1</span>])</div><div class="line">print(<span class="string">"maximum-scoring segment(MSS) score is added by:"</span>,letter2arr(mystr[start:end+<span class="number">1</span>]))</div></pre></td></tr></table></figure>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">str score sum <span class="keyword">is</span> : <span class="number">6</span></div><div class="line">arr: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-4</span>, <span class="number">-1</span>, <span class="number">-4</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-4</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-4</span>, <span class="number">-1</span>, <span class="number">-4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>, <span class="number">-4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>]</div><div class="line">str score sum <span class="keyword">is</span> : <span class="number">6</span></div><div class="line">start_pos (base <span class="keyword">from</span> <span class="number">0</span>): <span class="number">37</span> start: <span class="number">2</span></div><div class="line">end_pos (base <span class="keyword">from</span> <span class="number">0</span>) <span class="number">67</span> end: <span class="number">2</span></div><div class="line">max sum <span class="keyword">is</span>: <span class="number">14</span></div><div class="line">maximum-scoring segment(MSS) <span class="keyword">is</span>: AATTCCCCCCAATATCCCTCGGTTGATATTA</div><div class="line">str score sum <span class="keyword">is</span> : <span class="number">14</span></div><div class="line">maximum-scoring segment(MSS) score <span class="keyword">is</span> added by: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>, <span class="number">-4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure>
<p><strong>第一个if判断考虑序列对应的arr全为负值的情况</strong></p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>最关键的动态规划思想体现在：<br>    l = max(arr[i],l+arr[i])<br>    g = max(l,g)</p>
<p>先求局部最大值，而全局最大值出自局部最大值</p>
<h1 id="MSS对应的start位置"><a href="#MSS对应的start位置" class="headerlink" title="MSS对应的start位置"></a>MSS对应的start位置</h1><p>sum从第一个碱基开始累加求和，当sum到达最小值时，对应的下一个碱基即为MSS的start起始位置</p>
<h1 id="MSS对应的end位置"><a href="#MSS对应的end位置" class="headerlink" title="MSS对应的end位置"></a>MSS对应的end位置</h1><p>g第一次达到全局最大值时对应的碱基即为MSS的end位置</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="https://zhuanlan.zhihu.com/p/25848393" target="_blank" rel="external">最大连续子序列和（算法）</a></p>
<p>（2）<a href="https://blog.csdn.net/xiaminli/article/details/76424090" target="_blank" rel="external">Maximum Subarray 最大连续子串python实现【medium】</a></p>
<p>（3）<a href="http://www.ahathinking.com/archives/120.html" target="_blank" rel="external">最大子数组和（最大子序列和 | 连续子数组最大和）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;动态规划求序列最大得分连续子序列（MSS）&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="https:///AnJingwd.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https:///AnJingwd.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>lncRNApipe安装及使用</title>
    <link href="https:///AnJingwd.github.io/2018/03/12/lncRNApipe%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https:///AnJingwd.github.io/2018/03/12/lncRNApipe安装及使用/</id>
    <published>2018-03-12T11:28:53.000Z</published>
    <updated>2018-07-01T01:40:30.742Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">lncRNApipe安装及使用</blockquote>

<a id="more"></a>
<h1 id="lncRNApipe介绍"><a href="#lncRNApipe介绍" class="headerlink" title="lncRNApipe介绍"></a>lncRNApipe介绍</h1><p><a href="https://github.com/biocoder/Perl-for-Bioinformatics/blob/master/NGS-Utils/README.pod" target="_blank" rel="external">biocoder/Perl-for-Bioinformatics</a></p>
<p>对应文献：<a href="https://www.biorxiv.org/content/biorxiv/early/2015/04/10/017889.full.pdf" target="_blank" rel="external">Methods for distinguishing between protein-coding and long noncoding RNAs and the elusive biological purpose of translation of long noncoding RNAs</a></p>
<h1 id="lncRNApipe安装"><a href="#lncRNApipe安装" class="headerlink" title="lncRNApipe安装"></a>lncRNApipe安装</h1><p>perl lncRNApipe –setup –setup-compiler CC=g++</p>
<p>Perl-for-Bioinformatics-master.zip  —–<strong>325M</strong></p>
<p>报错：gcc:error:unrecognized command line option ‘-fstack-protector-strong’</p>
<p><strong>‘-fstack-protector-strong’ 选项是gcc4.9以后的版本才加入的，也就是说需要安装gcc4.9以后的版本才可以编译通过</strong></p>
<p><a href="https://stackoverflow.com/questions/9693031/how-to-install-xmlparser-without-expat-devel" target="_blank" rel="external">How to install XML::Parser without expat-devel?</a></p>
<p>Download from: <a href="http://sourceforge.net/projects/expat/files/expat/" target="_blank" rel="external">http://sourceforge.net/projects/expat/files/expat/</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">install_dir=/home/wangdong/<span class="built_in">local</span></div><div class="line">mkdir -p <span class="variable">$install_dir</span>/expat</div><div class="line">tar zxf /[<span class="built_in">where</span>-ever]/expat-2.1.0.tar.gz -C <span class="variable">$install_dir</span>/expat</div><div class="line"><span class="built_in">cd</span> <span class="variable">$install_dir</span>/expat/expat-2.1.0</div><div class="line">perl ./configure --prefix=<span class="variable">$install_dir</span>/expat LDFLAGS=-L/<span class="variable">$install_dir</span>/expat/lib </div><div class="line">make</div><div class="line">make install</div><div class="line"></div><div class="line"></div><div class="line">http://search.cpan.org - search <span class="keyword">for</span> and download - XML::Parser</div><div class="line"></div><div class="line">install_dir=/home/wangdong/<span class="built_in">local</span></div><div class="line">mkdir -p <span class="variable">$install_dir</span>/XML-parser</div><div class="line">wget http://search.cpan.org/CPAN/authors/id/T/TO/TODDR/XML-Parser-2.44.tar.gz</div><div class="line">tar zxf XML-Parser-2.44.tar.gz -C <span class="variable">$install_dir</span>/XML-parser</div><div class="line"><span class="built_in">cd</span> <span class="variable">$install_dir</span>/XML-parser/XML-Parser-2.44</div><div class="line">perl ./Makefile.PL EXPATLIBPATH=<span class="variable">$install_dir</span>/expat/lib EXPATINCPATH=<span class="variable">$install_dir</span>/expat/include</div><div class="line">make</div><div class="line">make <span class="built_in">test</span></div><div class="line">make install</div></pre></td></tr></table></figure>
<p><a href="https://github.com/libexpat/libexpat/" target="_blank" rel="external">libexpat/libexpat（会报错）</a></p>
<h1 id="lncRNApipe使用"><a href="#lncRNApipe使用" class="headerlink" title="lncRNApipe使用"></a>lncRNApipe使用</h1><pre><code>time perl $lncRNApipe --run $merge/lncRNApipe \
--cuffcmp &apos;-r &apos;$ref_mRNA_gtf&apos; -s &apos;$ref_hg38&apos; &apos;$merge&apos;/All_sample_assemble_merge.gtf&apos; \
--cat-ncRNAs &apos;-sample-names &quot;All_sample&quot; -ov 80 -fpkm 2 -len 200 -max-len 10000 -min-exons 1 -antisense&apos; \
--get-uq-feat &apos;-sf &apos;$lncRNA_bed&apos;&apos; \
--fetch-seq &apos;-db hg38&apos; \
--cpc \
--rna \
--cpu 16 \
--inf &amp;&gt;$merge/lncRNApipe.run.log
</code></pre><hr>
<p>通过以上方法安装该软件过于麻烦，如果只是使用该软件的鉴定lncRNA过程的相关脚本（cuffcompare, categorize_ncRNAs.pl, get_unique_features.pl, fetch_seq_from_ucsc.pl, RNAfold, Infernal and Coding Potential Calculator (CPC)），其实可以只有安装一些perl模块和软件即可。</p>
<p>需要安装的软件或者模块</p>
<ul>
<li>cuffcompare在cufflinks软件里</li>
<li>Perl脚本categorize_ncRNAs.pl，get_unique_features.pl, fetch_seq_from_ucsc.pl需要的模块在脚本开头都已经指明，用cpan安装即可，需要注意的是唯有一个该包自定义的perl模块需要手动安装</li>
</ul>
<p>git clone <a href="https://github.com/biocoder/Perl-for-Bioinformatics.git" target="_blank" rel="external">https://github.com/biocoder/Perl-for-Bioinformatics.git</a><br>cd IO-Routine<br>perl Makefile.PL PREFIX=/home/wangdong/perl/lib/site_perl/5.26.1/x86_64-linux LIB=/home/wangdong/perl/lib/site_perl/5.26.1/x86_64-linux<br>make<br>make install</p>
<h1 id="refGene-txt数据下载及处理"><a href="#refGene-txt数据下载及处理" class="headerlink" title="refGene.txt数据下载及处理"></a>refGene.txt数据下载及处理</h1><p>wget <a href="http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/refGene.txt.gz" target="_blank" rel="external">http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/refGene.txt.gz</a><br>ungz refGene.txt.gz<br>cat refGene.txt|awk ‘BEGIN{FS=”\t”;OFS=”\t”}{print $2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16}’&gt;hg38_refGene.txt</p>
<p>ps:lncRNApipe也没有说清楚refGene.txt的具体格式是什么，只说是Gene Prediction format，原因是refGene_to_bed.pl脚本有说明，该脚本需要从refGene.txt提取chrom   strand  txStart txEnd   name2这些列转换为bed文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;lncRNApipe安装及使用&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NGS" scheme="https:///AnJingwd.github.io/categories/NGS/"/>
    
    
      <category term="NGS" scheme="https:///AnJingwd.github.io/tags/NGS/"/>
    
  </entry>
  
  <entry>
    <title>gcc5.2编译安装</title>
    <link href="https:///AnJingwd.github.io/2018/02/13/gcc5.2%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <id>https:///AnJingwd.github.io/2018/02/13/gcc5.2编译安装/</id>
    <published>2018-02-13T05:14:19.000Z</published>
    <updated>2018-07-10T01:28:26.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">gcc5.2编译安装</blockquote>

<a id="more"></a>
<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><pre><code>cd /home/wangdong/local
wget http://www.netgull.com/gcc/releases/gcc-5.2.0/gcc-5.2.0.tar.gz
tar xzf gcc-5.2.0.tar.gz
cd gcc-5.2.0
./contrib/download_prerequisites
cd ..
mkdir objdir
cd objdir
$PWD/../gcc-5.2.0/configure --prefix=$HOME/gcc-5.2.0 --enable-languages=c,c++,fortran,go --disable-multilib
make
make install

echo &apos;export PATH=~/gcc-5.2.0/bin:$PATH&apos;&gt;&gt;~/.bashrc
echo &apos;export LD_LIBRARY_PATH=~/gcc-5.2.0/lib:$LD_LIBRARY_PATH&apos;&gt;&gt;~/.bashrc
echo &apos;export LD_LIBRARY_PATH=~/gcc-5.2.0/lib64:$LD_LIBRARY_PATH&apos;&gt;&gt;~/.bashrc
source ~/.bashrc
</code></pre><h1 id="cc与gcc"><a href="#cc与gcc" class="headerlink" title="cc与gcc"></a>cc与gcc</h1><p><a href="https://www.cnblogs.com/xj626852095/p/3648246.html" target="_blank" rel="external">cc、gcc、g++、CC的区别概括</a></p>
<p>gcc是C编译器；g++是C++编译器；linux下cc一般是一个符号连接，指向gcc；gcc和g++都是GUN（组织）的编译器。cc来自于昂贵的Unix系统，cc是商业软件。</p>
<p>对于cc设置软连接：ln -s gcc cc</p>
<h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><p>在脚本./contrib/download_prerequisites中自动在gcc安装目录内安装了</p>
<ul>
<li>MPFR=mpfr-2.4.2</li>
<li>GMP=gmp-4.3.2</li>
<li>MPC=mpc-0.8.1</li>
<li>isl=isl-0.14<br>等依赖，并设置了软连接，如果安装过程ftp连接不上，可以自行下载这四个包，放在gcc-5.2.0目录下，注释掉./contrib/download_prerequisites脚本内的wget 行即可</li>
</ul>
<h1 id="多核处理器下提高make的效率"><a href="#多核处理器下提高make的效率" class="headerlink" title="多核处理器下提高make的效率"></a>多核处理器下提高make的效率</h1><p>make的-j参数可以使make进行并行编译。make该参数的帮助如下：</p>
<p>-j [N], –jobs[=N]          Allow N jobs at once; infinite jobs with no arg<br><strong>虽然-j 可以大大缩短gcc编译时间,但注意：make -j命令并不是任何情况下都可以用的，在存在编译依赖的情况下，单核编译还是一种比较稳妥的方案。</strong></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="http://luiarthur.github.io/gccinstall" target="_blank" rel="external">Installing GCC without Root Privileges（推荐）</a></p>
<p>（2）<a href="http://bakeronit.com/2015/11/04/install_gcc/" target="_blank" rel="external">Install gcc-5.2.0 without root</a></p>
<p>（3）<a href="https://yhigu.wordpress.com/2016/03/02/install-latest-version-of-gcc-and-gcc-c-on-centos-6-7-from-source-code/" target="_blank" rel="external">Install Latest version of gcc and gcc-c++ on CentOS 6.7 from source code</a></p>
<p>（4）<a href="https://www.jianshu.com/p/7872d02694ea" target="_blank" rel="external">一文解决C程序的编译问题（推荐）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;gcc5.2编译安装&lt;/blockquote&gt;
    
    </summary>
    
      <category term="linux" scheme="https:///AnJingwd.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https:///AnJingwd.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>RNA-seq鉴定LncRNA概述</title>
    <link href="https:///AnJingwd.github.io/2018/02/05/RNA-seq%E9%89%B4%E5%AE%9ALncRNA%E6%A6%82%E8%BF%B0/"/>
    <id>https:///AnJingwd.github.io/2018/02/05/RNA-seq鉴定LncRNA概述/</id>
    <published>2018-02-05T13:44:08.000Z</published>
    <updated>2018-07-07T07:25:02.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">RNA-seq鉴定LncRNA概述：lncRNA简介，分析pipline，分析软件，结果评估指标</blockquote>

<a id="more"></a>
<h1 id="lncRNA简介"><a href="#lncRNA简介" class="headerlink" title="lncRNA简介"></a>lncRNA简介</h1><p>&emsp;&emsp;人类细胞中仅有少数转录生成的RNAs可作为蛋白质合成的模板。其余的RNA被称为非编码RNAs (ncRNAs)，它们位于编码蛋白的基因之间，其中长度超过200nt的ncRNAs称为lncRNAs(Long non-coding RNAs)</p>
<p>&emsp;&emsp;LincRNA序列的获取有以下两种途径：①可参考LncRNA (Long non-coding RNA)序列的获取，只是在获得LncRNA的序列后需确认该LncRNA为LincRNA；②通过检索LincRNA的研究论文获取其序列，很多LincRNA的序列会在附件中包含或者文章提供链接地址。</p>
<p>即lncRNA是一大类，长度超过200nt的称为LncRNA，位于基因间区的称为LincRNA.</p>
<h1 id="lncRNA特点"><a href="#lncRNA特点" class="headerlink" title="lncRNA特点"></a>lncRNA特点</h1><ul>
<li>lincRNA典型的表现出显著的组织和细胞特异性表达</li>
<li>lincRNA可能与其共表达的蛋白编码基因具有共同的生物学功能</li>
<li>lincRNA能折叠成热力学稳定的二级或者更高级的结构，这是其发挥功能的基础</li>
<li>相当大比例的lncRNA是编码基因的反义转录本或者与编码基因的外显子区正义方向部分重叠。</li>
</ul>
<p><img src="https://i.imgur.com/T0BhoK3.jpg" alt=""></p>
<h1 id="RNA-seq分析pipline"><a href="#RNA-seq分析pipline" class="headerlink" title="RNA-seq分析pipline"></a>RNA-seq分析pipline</h1><ol>
<li><a href="http://rnaseq.uoregon.edu/" target="_blank" rel="external">RNA-Seq guide (RNA-seqlopedia)</a></li>
</ol>
<p><img src="https://i.imgur.com/mfsVvwT.jpg" alt=""></p>
<p>转录组内的RNA，按照polyA形态：</p>
<ul>
<li>带polyA的RNA(mRNA和大部分的lncRNA)</li>
<li>不带polyA的RNA(小RNA和小部分的lncRNA)</li>
</ul>
<p>取样实例：晚期肝癌病人的肝组织（共四个）</p>
<ul>
<li>癌旁组织（N）</li>
<li>原发灶（P）</li>
<li>转移灶（M）</li>
<li>门脉血栓转移灶（V）</li>
</ul>
<p><img src="https://i.imgur.com/E8QHTUc.png" alt=""></p>
<ol>
<li><a href="https://github.com/twbattaglia/RNAseq-workflow" target="_blank" rel="external">twbattaglia/RNAseq-workflow</a></li>
</ol>
<p><img src="https://i.imgur.com/9MadHvS.jpg" alt=""></p>
<ol>
<li><a href="https://github.com/griffithlab/rnaseq_tutorial/wiki" target="_blank" rel="external">griffithlab/rnaseq_tutorial</a>,&emsp;&emsp;<a href="http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004393" target="_blank" rel="external">文章</a> ,&emsp;&emsp; <a href="https://github.com/griffithlab/rnaseq_tutorial/wiki/Lectures" target="_blank" rel="external">Lectures</a></li>
</ol>
<p><img src="https://i.imgur.com/cxxChCD.png" alt=""></p>
<p><a href="https://github.com/griffithlab/rnaseq_tutorial/wiki/Expression" target="_blank" rel="external">Expression</a><br><img src="https://i.imgur.com/CD5YS69.jpg" alt=""> </p>
<p><a href="https://www.jianshu.com/p/0e48facb3786?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=weixin-friends" target="_blank" rel="external">重复文章 “RNA-seq的转录水平表达分析”</a></p>
<p>该流程不适用小样本数据：For small sample sizes (n &lt; 4 per group), it is often better to perform regularization. This can be done using the limma package in Bioconductor</p>
<ol>
<li><p><a href="https://bioinform.github.io/rnacocktail/" target="_blank" rel="external">RNACocktail：A comprehensive framework for accurate and efficient RNA-Seq analysis</a>， <a href="http://dx.doi.org/10.1038/s41467-017-00050-4" target="_blank" rel="external">文章</a></p>
</li>
<li><p><a href="https://github.com/griffithlab/rnaseq_tutorial/blob/master/manuscript/supplementary_tables/supplementary_table_9.md" target="_blank" rel="external">RNA-seq workshops and online tutorials</a></p>
</li>
</ol>
<h1 id="LncRNA注释GTF文件及fasta文件"><a href="#LncRNA注释GTF文件及fasta文件" class="headerlink" title="LncRNA注释GTF文件及fasta文件"></a>LncRNA注释GTF文件及fasta文件</h1><ol>
<li>参考基因组fa及GTF文件下载：<a href="http://www.ensembl.org/info/data/ftp/index.html" target="_blank" rel="external">链接</a></li>
</ol>
<ul>
<li>Homo_sapiens.GRCh38.dna.primary_assembly.fa</li>
<li>Homo_sapiens.GRCh38.92.gtf</li>
</ul>
<p>参考基因组建立索引：</p>
<p><code>which hisat2_extract_exons.py</code> $known_coding_gtf &gt; genome.exon<br><code>which hisat2_extract_splice_sites.py</code> $known_coding_gtf &gt; genome.ss<br>time hisat2-build -p 8 $ref_hg38 –ss genome.ss –exon genome.exon genome_tran  </p>
<ol>
<li><a href="http://www.gencodegenes.org/releases/current.html" target="_blank" rel="external">GENCODE</a>  &emsp;&emsp; 2. <a href="http://www.noncode.org/download.php" target="_blank" rel="external">NONCODE</a></li>
</ol>
<p>ps: NONCODE has updated to NONCODEv5. NONCODE2016 website has been moved to <a href="http://www.bioinfo.org/NONCODE2016" target="_blank" rel="external">http://www.bioinfo.org/NONCODE2016</a></p>
<p>lncRNA建立索引：</p>
<p><code>which hisat2_extract_exons.py</code> $lncRNA_gtf &gt; NONCODE2016_human.exon<br><code>which hisat2_extract_splice_sites.py</code> $lncRNA_gtf &gt; NONCODE2016_human.ss<br>time hisat2-build -p 8 $lncRNA_ref –ss NONCODE2016_human.ss –exon NONCODE2016_human.exon NONCODE2016_index</p>
<p>&emsp;&emsp;ENCODE计划揭示了大约76%的人类基因组转录产生非编码蛋白的RNA分子，其中包括大约10000lincRNAs。NOCODE最新版数据库收录了&gt;30000个人的lincRNAs和 &gt;20000 小鼠的lincRNA。</p>
<h1 id="RNA-seq分析软件"><a href="#RNA-seq分析软件" class="headerlink" title="RNA-seq分析软件"></a>RNA-seq分析软件</h1><ul>
<li><a href="https://bioinformatics.ibers.aber.ac.uk/wiki/index.php/1.1_RNA-Seq_analysis_tools" target="_blank" rel="external">RNA-Seq analysis common tools</a></li>
</ul>
<p>推荐文献：<a href="https://www.nature.com/articles/s41467-017-00050-4" target="_blank" rel="external">Gaining comprehensive biological insight into the transcriptome by performing a broad-spectrum RNA-seq analysis</a></p>
<h2 id="基因组和转录组比对"><a href="#基因组和转录组比对" class="headerlink" title="基因组和转录组比对"></a>基因组和转录组比对</h2><h2 id="基因水平定量"><a href="#基因水平定量" class="headerlink" title="基因水平定量"></a>基因水平定量</h2><p>官网：<a href="http://htseq.readthedocs.io/en/release_0.9.1/" target="_blank" rel="external">HTSeq: Analysing high-throughput sequencing data with Python</a></p>
<p>使用：<a href="http://www.chenlianfu.com/?p=2438" target="_blank" rel="external">使用HTSeq进行有参转录组的表达量计算（推荐）</a></p>
<p>扩展阅读：</p>
<ol>
<li><p><a href="http://bioinformatics.cvr.ac.uk/blog/featurecounts-or-htseq-count/" target="_blank" rel="external">featureCounts or htseq-count?</a></p>
</li>
<li><p><a href="htseq-counts跟bedtools的区别">htseq-counts跟bedtools的区别</a></p>
</li>
</ol>
<h3 id="stringTie"><a href="#stringTie" class="headerlink" title="stringTie"></a>stringTie</h3><p><a href="https://github.com/NCBI-Hackathons/RNA_mapping/wiki" target="_blank" rel="external">NCBI-Hackathons/RNA_mapping</a></p>
<p>&emsp;&emsp;RNA-Seq基因组比对工具HISAT2：HISAT2是TopHat2/Bowti2的继任者，使用改进的BWT算法，实现了更快的速度和更少的资源占用，作者推荐TopHat2/Bowti2和HISAT的用户转换到HISAT2。<a href="https://ccb.jhu.edu/software/hisat2/index.shtml" target="_blank" rel="external">官网</a></p>
<p>gene annotation 一般选择 RefSeq 或者 Ensembl，这里，我们的参考基因组fasta文件和基因注释文件都选择 Ensembl的hg38版本（release-91），其ftp地址为：<a href="http://asia.ensembl.org/info/data/ftp/index.html" target="_blank" rel="external">http://asia.ensembl.org/info/data/ftp/index.html</a></p>
<pre><code>wget ftp://ftp.ensembl.org/pub/release-91/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
wget ftp://ftp.ensembl.org/pub/release-91/gtf/homo_sapiens/Homo_sapiens.GRCh38.91.chr.gtf.gz
</code></pre><h3 id="tophat-基于python2"><a href="#tophat-基于python2" class="headerlink" title="tophat(基于python2.*)"></a>tophat(基于python2.*)</h3><p><a href="http://blog.sina.com.cn/s/blog_a7f92a6a010101tv.html" target="_blank" rel="external">tophat 一些小错误</a></p>
<p>#genome index<br>    samtools faidx Homo_sapiens.GRCh38.dna.primary_assembly.fa<br>    bowtie2-build Homo_sapiens.GRCh38.dna.primary_assembly.fa hg38_genome</p>
<p>#transcriptome-index<br>    tophat -G $ref_mRNA_gtf –transcriptome-index=$tophat_transcriptome_index $bowtieGenomeIndex</p>
<p>PS: Please note that it is highly recommended that a FASTA file with the sequence(s) the genome being indexed be present in the same directory with the Bowtie index files and having the name <genome_index_base>.fa. If not present, TopHat will automatically rebuild this FASTA file from the Bowtie index files</genome_index_base></p>
<h2 id="比对质量评估"><a href="#比对质量评估" class="headerlink" title="比对质量评估"></a>比对质量评估</h2><p><img src="https://i.imgur.com/s2HS5Xp.png" alt=""></p>
<p><a href="http://rseqc.sourceforge.net/" target="_blank" rel="external">RSeQC: An RNA-seq Quality Control Package</a></p>
<pre><code>pip2.7 install RSeQC
</code></pre><h2 id="转录本重构"><a href="#转录本重构" class="headerlink" title="转录本重构"></a>转录本重构</h2><p><img src="https://i.imgur.com/NrEDde5.jpg" alt=""></p>
<p>转录本构建效果评估—评价指标：</p>
<ul>
<li>多外显子比率</li>
<li>转录本长度</li>
<li>转录本的可变剪切数目</li>
<li>对已知基因的覆盖程度</li>
</ul>
<table>
<thead>
<tr>
<th>基因数目</th>
<th>转录本数目</th>
<th>多外显子比率</th>
<th>多外显子转录本数目</th>
</tr>
</thead>
<tbody>
<tr>
<td>5-8万</td>
<td>&gt;10万</td>
<td>30%-50%</td>
<td>5万</td>
</tr>
</tbody>
</table>
<p><strong>对已知编码基因的覆盖程度：&gt;60%</strong></p>
<p>使用StringleTie的-个G模式构建转录本的输出文件主要有：</p>
<ol>
<li>.gtf文件:记录组装的转录本信息</li>
<li>gene_abundances.tsv文件：以tab键分割的记录基因丰度信息</li>
<li>在使用-B 参数下，生成*.ctab文件：用于下游Ballgown软件做差异表达分析的输入文件</li>
</ol>
<p>输出结果具体解释可查看StringTie官网的<a href="http://ccb.jhu.edu/software/stringtie/index.shtml?t=manual" target="_blank" rel="external">output部分</a></p>
<h2 id="合并转录本"><a href="#合并转录本" class="headerlink" title="合并转录本"></a>合并转录本</h2><p><a href="https://github.com/cole-trapnell-lab/cufflinks" target="_blank" rel="external">cole-trapnell-lab/cufflinks</a></p>
<p>可以直接下载解压预编译好的版本，省去安装 Boost C++ libraries的麻烦。在一下链接中选择linux版即可：<a href="http://cole-trapnell-lab.github.io/cufflinks/install/" target="_blank" rel="external">cufflinks</a></p>
<p>事实上，对于多个样本构建的多套转录本，如何得到统一的一套转录本，有下面三种方法：</p>
<ul>
<li>1 在转录本拼接之前，把各样本的比对bam文件合并，然后用合并的bam跑cufflinks</li>
<li>2 每个样本的比对bam文件分别单独跑cufflinks，各样本的转录本构建后，再用cuffcompare合并为一套转录本。</li>
<li>3 每个样本的比对bam文件分别单独跑cufflinks，各样本的转录本构建后，再用cuffmerge合并为一套转录本。</li>
</ul>
<p>这三种做法区别在于：</p>
<ul>
<li>第一种方法流程相对简单，所有的工作都抛给cufflinks一人完成，你都不需要知道cuffmerge、cuffcompare的用法。貌似是种完美解决方案。但很大的问题是：cufflinks能处理得了最终合并的bam吗？对于小物种的样本还可以，但对于人，若是7，8个样本合成的bam，cufflinks吃不销！</li>
<li>第二和三种方法是类似的，都是在保留可变剪切结构的前提下，将转录本合并。不同的是，cuffcompare只有A、B两条转录本结构相同的时候，才将A、B合并。而cuffmerge是A、B某些部分互相overlap，就将它俩合并。事实上，cuffmerge再做合并的时候，是把overlap的transfrag重新调用了cufflinks，合成一个transfrag。</li>
<li>第二和三种方法还有一个很大的不同是，cuffmerge可以带上参考注释有参考的进行合并，而cuffcompare不能如此。这是cuffmerge对cuffcompare的一个优势。</li>
</ul>
<p>因此，我认为第三种方法比第二种方法是最接近于第一种方法，而第一种方法的可实现性较差，在现有条件，最完美的解决方案就是第三种方法：每个bam单独跑cufflinks，跑完的结果再用cuffmerge合并。</p>
<p>参考：<a href="http://blog.csdn.net/shmilyringpull/article/details/8136837" target="_blank" rel="external">转录组测序分析中cufflinks的使用及问题</a></p>
<h2 id="鉴定novel-lncRNA"><a href="#鉴定novel-lncRNA" class="headerlink" title="鉴定novel lncRNA"></a>鉴定novel lncRNA</h2><ul>
<li>step1: 对所有样品拼接得到的转录本使用cuffcompare软件进行合并，筛除链方向不明的转录本；</li>
<li>step2: 选择转录本长度&gt;=200bp，Exon个数&gt;=2的转录本；</li>
<li>step3: 通过cufflinks计算每条转录本的reads覆盖度，选择至少在一个样品中覆盖度&gt;=3的转录本；</li>
<li>step4: 若该物种存在已知lncRNA数据，首先通过cuffcompare软件，将前一步得到的转录本与已知lncRNA进行比较，得到与已知lncRNA相同的转录本。这一部分转录本直接纳入最终的lncRNA集，不再进行后续筛选。之后，通过与该物种已知非lncRNA及非mRNA类型（rRNA,tRNA,snRNA,snoRNA,pre-miRNA,pseudogenes等）的转录本进行比较，筛除那些与以上已知转录本相似或相同的转录本。若无已知lncRNA数据，则直接进行与该物种已知非lncRNA及非mRNA类型转录本的比较；</li>
<li>step5: 通过与已知mRNA进行比较，并利用cuffcompare分析结果中的class_code(<a href="http://cole-trapnell-lab.github.io/cufflinks/cuffcompare/index.html#transfrag-class-codes)信息筛选候选lincRNA，intronic" target="_blank" rel="external">http://cole-trapnell-lab.github.io/cufflinks/cuffcompare/index.html#transfrag-class-codes)信息筛选候选lincRNA，intronic</a> lncRNA, anti-sense lncRNA类型的转录本。</li>
</ul>
<h3 id="class-code"><a href="#class-code" class="headerlink" title="class_code"></a>class_code</h3><table>
<thead>
<tr>
<th>Priority</th>
<th>Code</th>
<th>Description </th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>=</td>
<td>Complete match of intron chain</td>
</tr>
<tr>
<td>2</td>
<td>c</td>
<td>Contained</td>
</tr>
<tr>
<td>3</td>
<td>j</td>
<td>Potentially novel isoform (fragment): at least one splice junction is shared with a reference transcript</td>
</tr>
<tr>
<td>4</td>
<td>e</td>
<td>Single exon transfrag overlapping a reference exon and at least 10 bp of a reference intron, indicating a possible pre-mRNA fragment.</td>
</tr>
<tr>
<td>5</td>
<td>i</td>
<td>A transfrag falling entirely within a reference intron</td>
</tr>
<tr>
<td>6</td>
<td>o</td>
<td>Generic exonic overlap with a reference transcript</td>
</tr>
<tr>
<td>7</td>
<td>p</td>
<td>Possible polymerase run-on fragment (within 2Kbases of a reference transcript)</td>
</tr>
<tr>
<td>8</td>
<td>r</td>
<td>Repeat. Currently determined by looking at the soft-masked reference sequence and applied to transcripts where at least 50% of the bases are lower case</td>
</tr>
<tr>
<td>9</td>
<td>u</td>
<td>Unknown, intergenic transcript</td>
</tr>
<tr>
<td>10</td>
<td>x</td>
<td>Exonic overlap with reference on the opposite strand</td>
</tr>
<tr>
<td>11</td>
<td>s</td>
<td>An intron of the transfrag overlaps a reference intron on the opposite strand (likely due to read mapping errors)</td>
</tr>
<tr>
<td>12</td>
<td>.</td>
<td>(.tracking file only, indicates multiple classifications)</td>
</tr>
</tbody>
</table>
<h2 id="转录水平本定量"><a href="#转录水平本定量" class="headerlink" title="转录水平本定量"></a>转录水平本定量</h2><h2 id="lincRNA鉴定及功能注释"><a href="#lincRNA鉴定及功能注释" class="headerlink" title="lincRNA鉴定及功能注释"></a>lincRNA鉴定及功能注释</h2><p><img src="https://i.imgur.com/kSQJyU6.jpg" alt=""></p>
<p><img src="https://i.imgur.com/fSQhvH8.jpg" alt=""></p>
<ul>
<li>CNCI：<a href="https://academic.oup.com/nar/article/41/17/e166/2411728" target="_blank" rel="external">文献</a>，<a href="https://github.com/www-bioinfo-org/CNCI" target="_blank" rel="external">github仓库</a></li>
</ul>
<p><img src="https://i.imgur.com/xLkXFAQ.png" alt=""></p>
<p><a href="http://cpc.cbi.pku.edu.cn/docs/install_guide.jsp" target="_blank" rel="external">CPC </a></p>
<ul>
<li>ncFANs： <a href="https://academic.oup.com/nar/article/39/suppl_2/W118/2506940" target="_blank" rel="external">文献</a>， <a href="https://github.com/www-bioinfo-org/ncFANs" target="_blank" rel="external">github仓库</a></li>
</ul>
<p><img src="https://i.imgur.com/nDRVJCw.jpg" alt=""></p>
<p><img src="https://i.imgur.com/TvTIJhl.jpg" alt=""></p>
<h2 id="差异表达分析"><a href="#差异表达分析" class="headerlink" title="差异表达分析"></a>差异表达分析</h2><p><a href="https://www.bioconductor.org/help/course-materials/2015/LearnBioconductorFeb2015/B02.1.1_RNASeqLab.html" target="_blank" rel="external">RNA-Seq workflow: gene-level exploratory analysis and differential expression</a></p>
<p>cuffdiff -L 选项有两种写法：<br>偶数个样本：<br><img src="https://i.imgur.com/gL1s3XJ.jpg" alt=""></p>
<p>奇数个样本：</p>
<p><img src="https://i.imgur.com/4p4BFu5.jpg" alt=""></p>
<h3 id="ballgown安装"><a href="#ballgown安装" class="headerlink" title="ballgown安装"></a>ballgown安装</h3><p>需要先安装libxml2</p>
<pre><code>wget http://xmlsoft.org/sources/old/libxml2-2.7.1.tar.gz
untargz libxml2-2.7.1.targz
cd libxml2-2.7.1
./configure --prefix=/home/wangdong/softwares/libxml2
make &amp;&amp; make install


echo &apos;export PATH=/home/wangdong/softwares/libxml2/bin:$PATH&apos;&gt;&gt;~/.bashr    
echo &apos;export LD_LIBRARY_PATH=/home/wangdong/softwares/libxml2/lib:$LD_LIBRARY_PATH&apos;&gt;&gt;~/.bashrc 
echo &apos;export PKG_CONFIG_PATH=/home/wangdong/softwares/libxml2/lib/pkgconfig:$PKG_CONFIG_PATH&apos;&gt;&gt;~/.bashrc
</code></pre><p>ps:安装 dplyr包之前需要安装assertthat包</p>
<p>可参考：<a href="http://blog.sina.com.cn/s/blog_520d74440102w7um.html" target="_blank" rel="external">链接</a></p>
<p>使用可参考：<a href="https://www.jianshu.com/p/1f5d13cc47f8" target="_blank" rel="external">链接</a></p>
<p>ps:pheno_data里面第一列样本名需要和ballgown下面的文件夹的样本名一样，且先后顺序保持一致，不然会报错</p>
<h2 id="富集分析"><a href="#富集分析" class="headerlink" title="富集分析"></a>富集分析</h2><p>Gene ontology or pathway analysis for differentially expressed genes, this step is only applicable for <strong>protein coding genes</strong></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1） <a href="https://academic.oup.com/bib/article-abstract/18/5/789/2562763?redirectedFrom=fulltext" target="_blank" rel="external">Identification and function annotation of long intervening noncoding RNAs</a></p>
<p>（2）<a href="https://mp.weixin.qq.com/s/NUEi6oRFL7B3f1FpCD4Xug" target="_blank" rel="external">转录组分析工具哪家强？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;RNA-seq鉴定LncRNA概述：lncRNA简介，分析pipline，分析软件，结果评估指标&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>查看R包源码及linux下编译安装R</title>
    <link href="https:///AnJingwd.github.io/2018/01/28/%E6%9F%A5%E7%9C%8BR%E5%8C%85%E6%BA%90%E7%A0%81%E5%8F%8Alinux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85R/"/>
    <id>https:///AnJingwd.github.io/2018/01/28/查看R包源码及linux下编译安装R/</id>
    <published>2018-01-28T14:08:43.000Z</published>
    <updated>2019-03-28T04:25:25.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">查看R包源码，毕竟看优秀的源代码才能学得更快，为开发自己的R包打基础；同时由于R会将数据一次性读入内存的特性，实际分析数据时，选择linux集群将更合适，所以有必要在linux环境下编译安装R</blockquote>

<a id="more"></a>
<h1 id="R相关资源"><a href="#R相关资源" class="headerlink" title="R相关资源"></a>R相关资源</h1><p>（1）<a href="https://r-forge.r-project.org/" target="_blank" rel="external">R-Forge</a>：offers a central platform for the development of R packages, R-related software and further projects.</p>
<p>（2）<a href="http://rseek.org/" target="_blank" rel="external">rseek</a>：RSeek.org R-project Search Engine </p>
<p>（3）<a href="http://blog.yhat.com/" target="_blank" rel="external">The Yhat Blog</a>: machine learning, data science, engineering(推荐)</p>
<h1 id="查看R包函数源码"><a href="#查看R包函数源码" class="headerlink" title="查看R包函数源码"></a>查看R包函数源码</h1><p>&emsp;&emsp;首先，一个扩展包中定义的函数有区分公开和不公开的，会在扩展包根目录下的NAMESPACE文件中定义是否Export，如果一个函数没有Export，则为不公开的函数，只能在包内部调用。</p>
<p>&emsp;&emsp;lattice::qq是一个Generic Function，就像是plot，summary等函数，是由对象的class来确定实际执行的函数（例如对于data frame,执行summary时会执行summary.data.frame，对于lm会执行summary.lm等等，都不是则会执行summary.default）这是R S3 面向对象系统的设计。因此看到qq源代码时只能看到 UseMethod(“qq”)，还要看到哪些class实现了qq方法，而lattice并没有把这些实现给Export</p>
<p>&emsp;&emsp;想要看到源代码本可以直接在Console中输入函数名称或者在RStudio中函数上按F2即可，即 lattice::qq，但是这只是看到了Generic Function的源代码，如果需要看到具体的执行函数的源代码，那么就需要获得整个包的源码。可以到CRAN的页面CRAN - Package lattice 中下载Package source那个链接，这里面包含了整个lattice的源代码：<a href="http://cran.r-project.org/src/contrib/lattice_0.20-29.tar.gz" target="_blank" rel="external">http://cran.r-project.org/src/contrib/lattice_0.20-29.tar.gz</a></p>
<p>转自知乎：任坤 <a href="https://www.zhihu.com/question/24586822/answer/28305172" target="_blank" rel="external">链接</a></p>
<h2 id="以pheatmap包及其函数为例"><a href="#以pheatmap包及其函数为例" class="headerlink" title="以pheatmap包及其函数为例"></a>以pheatmap包及其函数为例</h2><p>（1）在Rstudio下查看</p>
<pre><code>??pheatmap
</code></pre><p><img src="https://i.imgur.com/6I5TzWq.jpg" alt=""></p>
<p><img src="https://i.imgur.com/4r5imUK.jpg" alt=""></p>
<p><strong>上述方法只能查到该包的Generic Function,对于不公开的内部函数只能下载源码包查看</strong></p>
<p>（2）找到R CRAN的相关源码包（.tar.gz）</p>
<p>例如：<a href="https://cran.r-project.org/web/packages/ggplot2/" target="_blank" rel="external">https://cran.r-project.org/web/packages/ggplot2/</a> 不同包只需要更改最后包名即可</p>
<h1 id="linux下源码安装R-3-4-4"><a href="#linux下源码安装R-3-4-4" class="headerlink" title="linux下源码安装R-3.4.4"></a>linux下源码安装R-3.4.4</h1><h2 id="建议先升级gcc"><a href="#建议先升级gcc" class="headerlink" title="建议先升级gcc"></a>建议先升级gcc</h2><p>可参考<a href="https://anjingwd.github.io/AnJingwd.github.io/2018/02/13/gcc5.2%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/" target="_blank" rel="external">gcc5.2编译安装</a>，因为需要相应的动态链接库。</p>
<h2 id="安装依赖的包"><a href="#安装依赖的包" class="headerlink" title="安装依赖的包"></a>安装依赖的包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#新建一个文件夹，然后把需要依赖的组件安装这个路径下</span></div><div class="line">mkdir -p <span class="variable">$HOME</span>/softwares/packages</div><div class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/softwares/packages</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##bzip2-1.0.6</span></div><div class="line">    wget https://link.zhihu.com/?target=http%3A/www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz</div><div class="line">    untargz bzip2-1.0.6.tar.gz</div><div class="line">    <span class="built_in">cd</span> bzip2-1.0.6</div><div class="line">    </div><div class="line">    修改bzip2-1.0.6的<span class="string">"Makefile"</span>文件：</div><div class="line">    </div><div class="line">    CC=gcc -fPIC  &lt;&lt; 新增 -fPIC，默认是64位编译的；</div><div class="line">    AR=ar</div><div class="line">    RANLIB=ranlib</div><div class="line">    LDFLAGS=</div><div class="line">    BIGFILES=-D_FILE_OFFSET_BITS=64</div><div class="line">    CFLAGS=-fPIC -Wall -Winline -O2 -g  $(BIGFILES)   <span class="comment"># 这里也可以加上</span></div><div class="line"></div><div class="line">    make -f Makefile-libbz2_so</div><div class="line">    make clean &lt;------------保守建议，还是clean一下 </div><div class="line">    make</div><div class="line">    make install PREFIX=<span class="variable">$HOME</span>/softwares/packages   <span class="comment"># prefix表示的安装的路径前缀</span></div><div class="line"></div><div class="line"><span class="comment">## curl-7.59</span></div><div class="line">    wget https://curl.haxx.se/download/curl-7.59.0.zip</div><div class="line">    unzip curl-7.59.0.zip</div><div class="line">    <span class="built_in">cd</span> curl-7.59.0</div><div class="line">    ./configure --prefix=<span class="variable">$HOME</span>/softwares/packages   <span class="comment"># 这个是之前设置的packages路径</span></div><div class="line">    make -j3 &amp;&amp; make install</div><div class="line"></div><div class="line"><span class="comment">## pcre-8.41.tar.gz</span></div><div class="line">    wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.tar.gz</div><div class="line">    tar -xvf pcre-8.41.tar.gz</div><div class="line">    <span class="built_in">cd</span> pcre-8.42</div><div class="line">    ./configure --<span class="built_in">enable</span>-utf8  --prefix=<span class="variable">$HOME</span>/softwares/packages  <span class="comment"># 这个是之前设置的packages路径，一定要设置enable-utf8;</span></div><div class="line">    make &amp;&amp; make install</div><div class="line"></div><div class="line"><span class="comment">## xz-5.2.3.tar.gz</span></div><div class="line">    下载路径：https://sourceforge.net/projects/lzmautils/files/xz-5.2.3.tar.gz/download</div><div class="line">    tar xzvf xz-5.2.3.tar.gz</div><div class="line">    <span class="built_in">cd</span> xz-5.2.3</div><div class="line">    ./configure --prefix=<span class="variable">$HOME</span>/softwares/packages</div><div class="line">    make -j3 &amp;&amp; make install</div><div class="line"></div><div class="line"><span class="comment">## zlib-1.2.8.tar.gz</span></div><div class="line">    wget https://www.zlib.net/fossils/zlib-1.2.8.tar.gz --no-check-certificate</div><div class="line">    tar xzvf zlib-1.2.8.tar.gz</div><div class="line">    <span class="built_in">cd</span> zlib-1.2.8</div><div class="line">    ./configure --prefix=<span class="variable">$HOME</span>/softwares/packages</div><div class="line">    make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$HOME/softwares/packages/bin:$PATH'</span>&gt;&gt;~/.bashrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'export LD_LIBRARY_PATH=$HOME/softwares/packages/lib:$LD_LIBRARY_PATH'</span>&gt;&gt;~/.bashrc </div><div class="line"><span class="built_in">echo</span> <span class="string">'export CFLAGS="-I$HOME/softwares/packages/include"'</span>&gt;&gt;~/.bashrc </div><div class="line"><span class="built_in">echo</span> <span class="string">'export LDFLAGS="-L$HOME/softwares/packages/lib"'</span>&gt;&gt;~/.bashrc</div><div class="line"></div><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure>
<h2 id="安装R3-4-4"><a href="#安装R3-4-4" class="headerlink" title="安装R3.4.4"></a>安装R3.4.4</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wget https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/base/R-<span class="number">3</span>/R-<span class="number">3.4</span><span class="number">.4</span>.tar.gz</div><div class="line">untargz R-<span class="number">3.4</span><span class="number">.4</span>.tar.gz</div><div class="line">cd R-<span class="number">3.4</span><span class="number">.4</span></div><div class="line">./configure --prefix=$HOME/softwares/packages/R  --enable-R-shlib  --with-readline=yes --with-libpng=yes --with-x=no  </div><div class="line"><span class="comment"># --enable-R-shlib一定要设置，否则安装不上Rserve;  prefix是安装路径，可以自定义；</span></div><div class="line"></div><div class="line"><span class="comment">#当前解压目录下编译、安装</span></div><div class="line">make &amp;&amp; make install</div><div class="line"></div><div class="line"><span class="comment">#离开解压目录，进入安装成功目录，进行检查是否成功</span></div><div class="line">cd /home/wangdong/R/bin</div><div class="line">./R</div><div class="line"></div><div class="line"><span class="comment">#添加环境变量</span></div><div class="line">echo <span class="string">'export PATH=/home/wangdong/R/bin:$PATH'</span>&gt;&gt;~/.bashrc</div><div class="line">export R_LIBS=/home/wangdong/R/lib64/R/<span class="keyword">library</span>  <span class="comment">#设置R包安装路径</span></div><div class="line"><span class="keyword">source</span> ~/.bashrc</div><div class="line"></div><div class="line"><span class="comment">## R3.5.0的安装   参考链接：https://www.jianshu.com/p/10a662678cdb</span></div><div class="line"></div><div class="line">依赖如上，但在安装R时注意：</div><div class="line">./configure --with-cairo=yes --with-libpng=yes --with-libtiff=yes --with-jpeglib=yes --enable-R-shlib --with-readline=yes --with-x=no --prefix=/lustre/home/bioxsyy/software/R-<span class="number">3.5</span>/R</div></pre></td></tr></table></figure>
<h2 id="使用Anaconda-安装R-与Rstudio-server"><a href="#使用Anaconda-安装R-与Rstudio-server" class="headerlink" title="使用Anaconda 安装R 与Rstudio server"></a>使用Anaconda 安装R 与Rstudio server</h2><p>安装Rstudio server <a href="https://cyverse-ez-quickstart.readthedocs-hosted.com/en/latest/rstudio.html" target="_blank" rel="external">链接</a> <a href="https://stackoverflow.com/questions/52381661/how-can-i-use-anaconda-environments-with-rstudio-server" target="_blank" rel="external">使用</a></p>
<h1 id="安装packages"><a href="#安装packages" class="headerlink" title="安装packages"></a>安装packages</h1><h2 id="方法一：每次安装包时指定镜像"><a href="#方法一：每次安装包时指定镜像" class="headerlink" title="方法一：每次安装包时指定镜像"></a>方法一：每次安装包时指定镜像</h2><ul>
<li>查看所有镜像：chooseCRANmirror()</li>
<li>选择镜像：chooseCRANmirror(ind=36)</li>
<li>通过getOption(“repos”)函数知道目前的镜像网站是哪里</li>
<li><p>所有的镜像网站网址在本地的一个csv</p>
<p>  cd /home/wangdong/R/R-3.1.2/doc<br>  less CRAN_mirrors.csv</p>
<p>  install.packages(‘plyr’, repos=’<a href="http://mirrors.tuna.tsinghua.edu.cn/CRAN/" target="_blank" rel="external">http://mirrors.tuna.tsinghua.edu.cn/CRAN/</a>‘)</p>
</li>
</ul>
<h2 id="方法二：修改配置文件"><a href="#方法二：修改配置文件" class="headerlink" title="方法二：修改配置文件"></a>方法二：修改配置文件</h2><p>Rprofile.site (in the directory /your-R-installation/etc/ , eg R-2.14.0/etc)</p>
<pre><code>cd /home/wangdong/R/R-3.1.2/etc
vim repositories

#set a CRAN mirror
local({r &lt;- getOption(&quot;repos&quot;)
    r[&quot;CRAN&quot;] &lt;- &quot;http://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;
    options(repos=r)})
</code></pre><p>备用镜像：</p>
<ul>
<li><a href="http://mirror.bjtu.edu.cn/cran/" target="_blank" rel="external">http://mirror.bjtu.edu.cn/cran/</a></li>
<li><a href="http://mirrors.ustc.edu.cn/CRAN/" target="_blank" rel="external">http://mirrors.ustc.edu.cn/CRAN/</a></li>
<li><a href="http://mirrors.xmu.edu.cn/CRAN/" target="_blank" rel="external">http://mirrors.xmu.edu.cn/CRAN/</a></li>
</ul>
<h2 id="安装bioconder"><a href="#安装bioconder" class="headerlink" title="安装bioconder"></a>安装bioconder</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">source</span>(<span class="string">"http://bioconductor.org/biocLite.R"</span>)</div><div class="line">options(BioC_mirror=<span class="string">"http://mirrors.ustc.edu.cn/bioc/"</span>)</div><div class="line">biocLite()</div></pre></td></tr></table></figure>
<p>如果安装bioconductor软件包安装不上，可以先update.packages()，然后选择镜像。</p>
<h2 id="设置环境变量-1"><a href="#设置环境变量-1" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>R中用.libPaths()函数查看lib路径，如果有多个lib,install.packages()默认是安装在第一个目录下</p>
<p>修改.bashrc文件中R lib路径的<strong>环境变量（R_LIBS）</strong>：export R_LIBS=/home/wangdong/R/lib64/R/library，就能设定自己lib的默认目录，即使使用的R是别人安装的或是集体共用的，也能拥有自己的library</p>
<h3 id="终端直接调用R脚本"><a href="#终端直接调用R脚本" class="headerlink" title="终端直接调用R脚本"></a>终端直接调用R脚本</h3><pre><code>/home/wangdong/R/bin/Rscript 或者 Rscript test.R
</code></pre><p>error while loading shared libraries: libicuuc.so.50解决：</p>
<p>在登陆节点启动R没问题，在计算节点报上述错误，解决：</p>
<p>ls -l /usr/lib64 | grep libicui* 找到相应文件，将其复制到自己的目录，然后设置软连接，并设置环境变量LD_LIBRARY_PATH</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="http://blog.sina.com.cn/s/blog_605f5b4f010160su.html" target="_blank" rel="external">R中查看函数源代码</a></p>
<p>（2）<a href="http://blog.sina.com.cn/s/blog_605f5b4f010160su.html" target="_blank" rel="external">R中查看函数源代码</a></p>
<p>（3）<a href="http://blog.csdn.net/high2011/article/details/52052333" target="_blank" rel="external">linux下源码安装R-3.1.2.tar.gz和RStudio开发工具</a></p>
<p>（4）<a href="http://m.blog.itpub.net/9036/viewspace-2122686/" target="_blank" rel="external">CentOS 下 R 的安装</a></p>
<p>（5）<a href="https://stackoverflow.com/questions/11488174/how-to-select-a-cran-mirror-in-r" target="_blank" rel="external">How to select a CRAN mirror in R</a></p>
<p>（6）<a href="https://zhuanlan.zhihu.com/p/28055351" target="_blank" rel="external">linux下R3.4.1的安装手册（推荐）</a></p>
<p>（7）<a href="https://oguya.ch/posts/2017-03-18-building-R-on-rhel-6/" target="_blank" rel="external">Building R on RedHat Linux 6</a></p>
<p>（8）<a href="http://blog.sina.com.cn/s/blog_6aaea1760102x5ka.html" target="_blank" rel="external">Linux下的R安装、配置与测试 </a></p>
<p>（9）<a href="https://stackoverflow.com/questions/40639138/configure-error-installing-r-3-3-2-on-ubuntu-checking-whether-bzip2-support-suf" target="_blank" rel="external">configure error installing R-3.3.2 on Ubuntu: checking whether bzip2 support suffices… configure: error: bzip2 library and headers are required</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;查看R包源码，毕竟看优秀的源代码才能学得更快，为开发自己的R包打基础；同时由于R会将数据一次性读入内存的特性，实际分析数据时，选择linux集群将更合适，所以有必要在linux环境下编译安装R&lt;/blockquote&gt;
    
    </summary>
    
      <category term="R" scheme="https:///AnJingwd.github.io/categories/R/"/>
    
    
      <category term="R" scheme="https:///AnJingwd.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>qPCR结果分析及非参数检验</title>
    <link href="https:///AnJingwd.github.io/2018/01/28/qPCR%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90%E5%8F%8A%E9%9D%9E%E5%8F%82%E6%95%B0%E6%A3%80%E9%AA%8C/"/>
    <id>https:///AnJingwd.github.io/2018/01/28/qPCR结果分析及非参数检验/</id>
    <published>2018-01-28T02:33:14.000Z</published>
    <updated>2018-10-18T01:29:37.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">qPCR结果分析及非参数检验</blockquote>

<a id="more"></a>
<h1 id="相对表达量计算"><a href="#相对表达量计算" class="headerlink" title="相对表达量计算"></a>相对表达量计算</h1><p>一：⊿Ct如何计算，公式推导</p>
<p>(1)    一般，我们都假设扩增效率为1，也就是每个循环增加一倍。</p>
<p><img src="https://i.imgur.com/DyztX9Q.jpg" alt=""></p>
<p>(2)    当产物量达到同一水平的时候，但Ct值不同，其原因就在于期初的模板量的差距，而当检测样本和内参基因的产物量相同的时候，找出他们模板量的比值差的话，就需要做一下除法，也就是下面这样： </p>
<p><img src="https://i.imgur.com/v10u3n5.jpg" alt=""></p>
<p>二：具体例子（⊿⊿Ct计算）</p>
<p><img src="https://i.imgur.com/3Wd6BKb.png" alt=""></p>
<p>一般在进行qPCR实验时，都会设计独立三次重复试验，每次作3个复孔，然后根据下列公式先分别计算试验组和对照组的ΔCt值</p>
<ul>
<li>ΔCt试验=Ct目的基因-Ct内参基因</li>
<li>ΔCt对照=Ct目的基因-Ct内参基因</li>
</ul>
<p>注：Ct目的基因和Ct内参基因是三个复孔Ct值求得的均值</p>
<p>ΔΔCt=ΔCt试验-ΔCt对照，相对表达量=2^(-⊿⊿Ct)</p>
<p>&emsp;&emsp;相对表达量是指目的基因在试验组中的表达是目的基因在对照组表达的多少倍。在P&lt;0.05的情况下，如果2-ΔΔCt小于1说明目的基因在试验组中表达下调，大于1说明目的基因在试验组中表达上调。否则表达无差异。</p>
<h1 id="组间差异非参数检验"><a href="#组间差异非参数检验" class="headerlink" title="组间差异非参数检验"></a>组间差异非参数检验</h1><p>原始数据处理（EXCEL）：</p>
<p><img src="https://i.imgur.com/4Lgn5iR.png" alt=""></p>
<p>&emsp;&emsp;如果数据无法满足t检验或ANOVA的参数假设，可以转而使用非参数方法。<strong>若两组数据独立，</strong> 可以使用Wilcoxon秩和检验（更广为人知的名字是Mann-Whitney U检验）来评估观测是否是从相同的概率分布中抽得的（即，在一个总体中获得更高得分的概率是否比另<br>一个总体要大）。调用格式为：</p>
<pre><code>wilcox.test(y ~ x, data，exact=FALSE)
</code></pre><p>其中的y是数值型变量，而x是一个二分变量。</p>
<p>Wilcoxon符号秩检验是<strong>非独立样本</strong>t检验的一种非参数替代方法。它适用于两组成对数据和无法保证正态性假设的情境。调用格式与Mann-Whitney U检验完全相同，不过还可以添加参数paired=TRUE。</p>
<h2 id="绘制箱图"><a href="#绘制箱图" class="headerlink" title="绘制箱图"></a>绘制箱图</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#qPCR_barplot.R</span></div><div class="line">setwd(<span class="string">"F:/R working directory/qPCR"</span>)</div><div class="line">qPCR&lt;-read.csv(<span class="string">"miRNA_qPCR_plot.csv"</span>,header=<span class="literal">TRUE</span>,check.names = <span class="literal">FALSE</span>)</div><div class="line"><span class="keyword">library</span>(ggplot2)</div><div class="line">p&lt;-ggplot(data=qPCR, aes(x=miRNA,y=value))+geom_boxplot(aes(fill=sample))</div><div class="line"></div><div class="line">p + facet_wrap(~ miRNA, scales=<span class="string">"free"</span>)</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="http://www.360doc.com/content/17/0706/21/44614528_669420186.shtml" target="_blank" rel="external">如何分析你凌乱不堪的qPCR数据（推荐）</a></p>
<p>（2）<a href="http://www.dxy.cn/bbs/topic/25725392" target="_blank" rel="external">分享自己关于qPCR（RT-PCR）数据相对定量的分析方法与经验！</a></p>
<p>（3）<a href="http://www.dxy.cn/bbs/thread/29554700#29554700" target="_blank" rel="external">△△CT数据处理</a></p>
<p>（4）<a href="http://www.dxy.cn/bbs/thread/26343222#26343222" target="_blank" rel="external">相对荧光定量数据处理</a></p>
<p>（5）<a href="http://www.jianshu.com/p/b7274afff14f?from=timeline" target="_blank" rel="external">R语言可视化学习笔记之添加p-value和显著性标记（推荐）</a></p>
<p>（6）<a href="https://github.com/const-ae/ggsignif" target="_blank" rel="external">添加线条来连接比较的两组，这一功能已由包ggsignif实现（推荐）</a></p>
<p>（7）<a href="https://www.tanboyu.com/r-for-nonparametric-tests.html" target="_blank" rel="external">非参检验R语言实现</a></p>
<p>（8）<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjVxeX1x_DXAhXMxrwKHVvOAnwQFgg4MAM&amp;url=http%3A%2F%2Fblog.csdn.net%2Ftimothyzh%2Farticle%2Fdetails%2F7657470&amp;usg=AOvVaw3SpJzBCWcgBwfbkJn65CFP" target="_blank" rel="external">Wilcoxon-Mann-Whitney秩和检验/rank sum test（或test U）</a></p>
<p>（9）<a href="https://wenku.baidu.com/view/d09fcc7033687e21ae45a902.html" target="_blank" rel="external">荧光定量PCR应用指南{推荐}</a></p>
<p>（10） <a href="http://sphweb.bumc.bu.edu/otlt/mph-modules/bs/bs704_nonparametric/BS704_Nonparametric4.html" target="_blank" rel="external">Mann Whitney U Test (Wilcoxon Rank Sum Test)</a></p>
<p>（11）<a href="http://www.omicsclass.com/article/446" target="_blank" rel="external">推荐：qRT-PCR相对定量计算详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;qPCR结果分析及非参数检验&lt;/blockquote&gt;
    
    </summary>
    
      <category term="实验" scheme="https:///AnJingwd.github.io/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="实验" scheme="https:///AnJingwd.github.io/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>IGV批量查看变异</title>
    <link href="https:///AnJingwd.github.io/2018/01/26/IGV%E6%89%B9%E9%87%8F%E6%9F%A5%E7%9C%8B%E5%8F%98%E5%BC%82/"/>
    <id>https:///AnJingwd.github.io/2018/01/26/IGV批量查看变异/</id>
    <published>2018-01-26T03:21:34.000Z</published>
    <updated>2018-07-17T03:11:59.820Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">IGV批量查看变异并过滤</blockquote>

<a id="more"></a>
<h1 id="IGV可视化准备"><a href="#IGV可视化准备" class="headerlink" title="IGV可视化准备"></a>IGV可视化准备</h1><p><a href="http://www.nature.com/nbt/journal/v29/n1/full/nbt.1754.html" target="_blank" rel="external">Nature biotechnology文献</a>：Integrative Genomics Viewer</p>
<p><a href="http://software.broadinstitute.org/software/igv/download" target="_blank" rel="external">Downloads IGV </a>; &emsp;<a href="http://software.broadinstitute.org/software/igv/igvtools" target="_blank" rel="external">igvtools</a>为一些数据可视化预处理程序</p>
<p>PS:igv 要求java 1.8 ,安装java1.8可参考<a href="https://www.cnblogs.com/xuliangxing/p/7066913.html" target="_blank" rel="external">链接</a></p>
<pre><code>export JAVA_HOME=/home/wangdong/softwares/java1.8/jdk1.8.0_172
export JRE_HOME=/home/wangdong/softwares/java1.8/jdk1.8.0_172/jre 
export PATH=$PATH:/home/wangdong/softwares/java1.8/jdk1.8.0_172/bin 
export CLASSPATH=./:/home/wangdong/softwares/java1.8/jdk1.8.0_172/lib:/home/wangdong/softwares/java1.8/jdk1.8.0_172/jre/lib
</code></pre><p>IGV可视化数据准备</p>
<ul>
<li>不是什么数据都可以拿IGV看的，参考基因组必须为FASTA格式；</li>
<li>IGV只是负责将比对结果可视化，并没有比对过程，所以不能直接载入reads；</li>
<li>需要将待比对的reads与前面指定的参考基因组用bwa进行比对；</li>
<li>比对后的sam文件也不能直接载入，<strong>要转bam；bam排序；bam建索引（可以一步完成）</strong>；</li>
</ul>
<p><strong>需要两个文件.bam文件和.bam.bai文件</strong></p>
<h1 id="IGV批量查看变异"><a href="#IGV批量查看变异" class="headerlink" title="IGV批量查看变异"></a>IGV批量查看变异</h1><h2 id="生成批量查看-bat文件"><a href="#生成批量查看-bat文件" class="headerlink" title="生成批量查看.bat文件"></a>生成批量查看.bat文件</h2><p>IGV批量运行的.bat文件命令参数及例子：<a href="http://software.broadinstitute.org/software/igv/PortCommands" target="_blank" rel="external">Controlling IGV through a Port</a> ,&emsp;&emsp; <a href="http://software.broadinstitute.org/software/igv/batch" target="_blank" rel="external">a batch file example</a> &emsp;&emsp; <a href="https://github.com/stevekm/IGV-snapshot-automator" target="_blank" rel="external">IGV-snapshot-automator项目</a></p>
<p>使用命令：<br>    java -Xmx1024M -jar ~/bin/igv-2.3.52/igv.jar -b IGV_screenshot.bat</p>
<h1 id="VNC-Viewer使用"><a href="#VNC-Viewer使用" class="headerlink" title="VNC Viewer使用"></a>VNC Viewer使用</h1><p>&emsp;&emsp;VNC (Virtual Network Console)是虚拟网络控制台的缩写。它 是一款优秀的远程控制工具软件，由著名的 AT&amp;T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux 操作系统的免费的开源软件。VNC基本上是由两部分组成：一部分是客户端的应用程序(vncviewer)；另外一部分是服务器端的应用程序(vncserver)。<a href="https://archive.realvnc.com/download/open/4.0/" target="_blank" rel="external">Download VNC Viewer </a>，解压后按照README安装即可</p>
<p><a href="http://blog.itpub.net/519536/viewspace-607549/" target="_blank" rel="external">Linux环境VNC服务安装、配置与使用</a></p>
<p>工作流程：</p>
<ol>
<li>服务器端启动VNC Server，使用命令vncserver,之后输入密码并确认，之后获得数字1，表示vncserver创建的第一个vnc viewer用户；</li>
<li>在win7的客户端创建连接即可</li>
</ol>
<p><img src="https://i.imgur.com/qnCN4Vt.jpg" alt=""></p>
<p>之后点击igv.sh运行igv,在Tools的Run Batch Script，导入.bat文件即可！</p>
<h1 id="变异的过滤"><a href="#变异的过滤" class="headerlink" title="变异的过滤"></a>变异的过滤</h1><p>&emsp;&emsp;在对Func.refGene，ExonicFunc.refGene，1000g2015aug_eas等进行hard filter后，一般全外显子测序找到的突变依然还有一两百个，接下来需要通过直观的可视化，验证SNP/SNV calls和结构重排，进一步去除假阳性的结果。<a href="https://github.com/griffithlab/rnaseq_tutorial/wiki/IGV-Tutorial" target="_blank" rel="external">IGV Tutorial（推荐）</a></p>
<h2 id="查看技巧"><a href="#查看技巧" class="headerlink" title="查看技巧"></a>查看技巧</h2><ol>
<li>File—&gt;Load from Server可以加载许多tracks</li>
</ol>
<p><img src="https://i.imgur.com/Okk9sPp.jpg" alt=""></p>
<ol>
<li>在reads区右键可以选择不同的查看方式</li>
</ol>
<p><img src="https://i.imgur.com/SeQvjJ9.jpg" alt=""></p>
<ol>
<li><p><strong>可以同时开多个igv.sh或者将IGV_snapshots.bat文件合并，并删除掉除最后一个之外的所有exit语句</strong></p>
</li>
<li><p><strong>maxPanelHeight 设置很重要，默认800，但是igv截图不全，所以设置为10000</strong></p>
</li>
</ol>
<h1 id="通过命令行自动截图"><a href="#通过命令行自动截图" class="headerlink" title="通过命令行自动截图"></a>通过命令行自动截图</h1><p>服务器上vncserver源码下载<a href="https://www.realvnc.com/en/connect/download/vnc/linux/" target="_blank" rel="external">链接</a>,选择Generic scripts x64，然后下载即可，安装可查看README文件。具体可参考（1）<a href="https://blog.csdn.net/xuyunzhang/article/details/7620019" target="_blank" rel="external">vnc 源码安装</a>； （2）<a href="http://blog.51cto.com/woyaoxuelinux/1914078" target="_blank" rel="external">linux命令：VNC服务的配置及使用</a></p>
<ul>
<li>开启vncserver</li>
<li>设置环境变量DISPLAY:  export DISPLAY=:1 (你vnc开的几就写几)</li>
<li>修改igv.sh中-Xmx4000m，增大igv分配内存</li>
<li>igv.sh -b IGV_snapshots.bat</li>
</ul>
<h2 id="过滤标准"><a href="#过滤标准" class="headerlink" title="过滤标准"></a>过滤标准</h2><ol>
<li>高质量的SNVs和SNPs要求在所有的reas中High base qualities，并且不能在reads的末端；</li>
<li>Good mapping quality of reads, no strand bias, allele frequency consistent with heterozygous mutation</li>
</ol>
<h3 id="Important-metrics-for-evaluating-the-validity-of-SNVs"><a href="#Important-metrics-for-evaluating-the-validity-of-SNVs" class="headerlink" title="Important    metrics    for    evaluating    the    validity of    SNVs:"></a>Important    metrics    for    evaluating    the    validity of    SNVs:</h3><ul>
<li>Coverage    </li>
<li>Amount  of     support    </li>
<li>Strand     bias    /    PCR    artifacts    </li>
<li>Mapping    qualities    </li>
<li>Base    qualities    </li>
</ul>
<ol>
<li>通过Coverage track查看比对情况，没有比对上参考基因组的碱基将在Coverage track和data panel以不同颜色高亮显示；</li>
</ol>
<p><img src="https://i.imgur.com/5dNcVPB.jpg" alt=""></p>
<ol>
<li>低质量的碱基calls是半透明的（faint,semi-transparent）</li>
</ol>
<p><img src="https://i.imgur.com/OYSyAsZ.png" alt=""></p>
<h3 id="区分SNP突变和错配："><a href="#区分SNP突变和错配：" class="headerlink" title="区分SNP突变和错配："></a>区分SNP突变和错配：</h3><ol>
<li>SNP突变如果是杂合，会在Coverage track处显示红蓝box,当鼠标悬停在上面时显示allele counts 和frequencies。可以在此处右键，选择sort alignments by &gt; base查看，以此根据碱基的透明度确定SNP碱基call的质量；</li>
</ol>
<p><img src="https://i.imgur.com/A5XUxR9.jpg" alt=""></p>
<ol>
<li>而错配的情况在在Coverage track处是没有红蓝box的。通过在此处右键，选择shade base by quality使得用半透明颜色表示的低质量碱基全部高亮显示，方便查看；接着选择Sort alignments by &gt; read strand，然后Color alignments by &gt; read strand，以此确定是否存在stand bias。</li>
</ol>
<p><img src="https://i.imgur.com/vgCysAl.png" alt=""></p>
<p><img src="https://i.imgur.com/Cu5w71N.png" alt=""></p>
<p><img src="https://i.imgur.com/HlMwp7F.png" alt=""></p>
<h3 id="Important-metrics-for-evaluating-SVs"><a href="#Important-metrics-for-evaluating-SVs" class="headerlink" title="Important    metrics    for    evaluating    SVs:"></a>Important    metrics    for    evaluating    SVs:</h3><ul>
<li>Coverage    </li>
<li>Insert    size    </li>
<li>Read    pair orientation</li>
</ul>
<p>具体使用可查看：<a href="https://github.com/griffithlab/rnaseq_tutorial/wiki/LectureFiles/cshl/2016/IGV_Tutorial_Long_BroadInstitute.pdf" target="_blank" rel="external">IGV Lecture - Long, from Broad Institute    </a>，<strong>也包括了查看RNA-seq比对情况的操作</strong></p>
<h2 id="vncviewer-连接上后黑屏解决"><a href="#vncviewer-连接上后黑屏解决" class="headerlink" title="vncviewer 连接上后黑屏解决"></a>vncviewer 连接上后黑屏解决</h2><p>参考：<a href="https://zhidao.baidu.com/question/269172162176272125.html" target="_blank" rel="external">vnc viewer连接黑屏</a></p>
<p>（1）修改/home/wangdong/.vnc/xstartup文件<br>    vi /home/wangdong/.vnc/xstartup</p>
<pre><code>##如果使用的是gnome图像界面，则需要注释掉以下两行,
#xterm -geometry 80x24+10+10 -ls -title &quot;$VNCDESKTOP Desktop&quot; &amp;
#twm &amp;
##并添加以下这行：
gnome-session &amp;
</code></pre><p>（2）改变xstartup的权限</p>
<pre><code>chmod 777 /home/wangdong/.vnc/xstartup
</code></pre><p>ps: 首选在图形桌面用命令行运行igv.sh,再点击igv.sh运行</p>
<h2 id="命令行下批量运行IGV"><a href="#命令行下批量运行IGV" class="headerlink" title="命令行下批量运行IGV"></a>命令行下批量运行IGV</h2><ul>
<li>开启Xmanager - Passive</li>
<li>在Xshell5的Poperties—&gt;Tunneling—–&gt;Forward X11 connections to</li>
<li>命令行下使用igv.sh -b IGV_snapshots.bat</li>
</ul>
<p>igv命令行参数可查看：<a href="http://software.broadinstitute.org/software/igv/startingIGV" target="_blank" rel="external">链接</a></p>
<p>ps: windows下需要提前安装好igv</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="https://www.cnblogs.com/leezx/p/5603481.html" target="_blank" rel="external">可视化工具之 IGV 使用方法</a></p>
<p>（2）<a href="https://gist.github.com/dfjenkins3/5c6dc1e55e78fa17b931" target="_blank" rel="external">IGV_Batch_Screenshots.md</a></p>
<p>（3）<a href="http://blog.csdn.net/Bingorl/article/details/78289280?locationNum=8&amp;fps=1" target="_blank" rel="external">如何使用VNC Viewer连接远程CentOS服务器</a></p>
<p>（4）<a href="https://www.biostars.org/p/5563/" target="_blank" rel="external">Quick Visual Inspection Of Mapping Images For A List Of Regions</a></p>
<p>（5）<a href="https://github.com/igvteam/igv/issues/160" target="_blank" rel="external">Unable to adjust image height via batch script </a></p>
<p>（6）<a href="https://mp.weixin.qq.com/s/tX0EaXlNNETSsY4DC68jCA" target="_blank" rel="external">Xshell显示图形化界面</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;IGV批量查看变异并过滤&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NGS" scheme="https:///AnJingwd.github.io/categories/NGS/"/>
    
    
      <category term="NGS" scheme="https:///AnJingwd.github.io/tags/NGS/"/>
    
  </entry>
  
  <entry>
    <title>设计miRNA的qPCR引物</title>
    <link href="https:///AnJingwd.github.io/2018/01/24/%E8%AE%BE%E8%AE%A1miRNA%E7%9A%84qPCR%E5%BC%95%E7%89%A9/"/>
    <id>https:///AnJingwd.github.io/2018/01/24/设计miRNA的qPCR引物/</id>
    <published>2018-01-24T02:01:15.000Z</published>
    <updated>2018-01-25T01:04:07.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">在线设计miRNA的qPCR引物</blockquote>

<a id="more"></a>
<h1 id="miRNA简介"><a href="#miRNA简介" class="headerlink" title="miRNA简介"></a>miRNA简介</h1><p>&emsp;&emsp;microRNAs(miRNAs)是指长度在20-24nt的非编码RNAs,其可通过影响转录的mRNAs的转录和稳定性，参与细胞组织的转录后基因表达调控。miRNAs由RNA聚合酶II转录为带帽子和多聚腺苷酸的初级转录物（pri-miRNA）的一部分（有的编码蛋白，有的是非编码的）。初级转录物被Drosha核糖核酸酶III切割产生大约70nt的茎环前体miRNA(pre-miRNA)，其被细胞质Dicer 核糖核酸酶裂解产生成熟的miRNA和反义miRNA star(miRNA*)。成熟的miRNA包含在RNA诱导的沉默复合物（RISC)中。通过不完全的碱基配对，其能够识别靶标mRNA的3’端，并通常导致的结果是翻译被抑制或者靶标mRNA的去稳定化。RefSeq代表预测的microRNA的茎环结构。</p>
<p>miRNA主要公共数据库<a href="http://www.mirbase.org/" target="_blank" rel="external">miRBase</a>中已经有1W多条来自不同物种的miRNA序列</p>
<p><img src="https://i.imgur.com/qfASLJU.jpg" alt=""></p>
<h1 id="miRNA检测引物设计"><a href="#miRNA检测引物设计" class="headerlink" title="miRNA检测引物设计"></a>miRNA检测引物设计</h1><p>引物有两种类型，一个是poly加尾，一个是加茎环结构。PCR荧光定量又分为探针法和染料法：</p>
<ol>
<li>Poly方法的话，引物设计简单，但是引起非特异性扩增的可能性大。</li>
<li>探针法特异性更高，但是价格高，不适合大批量的实验。</li>
</ol>
<h2 id="加Poly方法"><a href="#加Poly方法" class="headerlink" title="加Poly方法"></a>加Poly方法</h2><p>miRNA qRT-PCR Detection Kit中已提供有miRNA检测的Reverse 通用引物：“Universal adaptor PCR Primer”，Forward 检测引物需客户参考miRNA序列自行设计。因为miRNA序列长度一般都在18～24nt之间，所以其检测的Forward 检测引物一般都直接选用其miRNA序列或为增加其检测的特异性而特殊设计的序列：如有的miRNA GC含量偏高或引物易形成引物二聚体，其引物可为miRNA 3’端去除几个碱基后整理的序列。</p>
<p>miRNA qPCR Forward Primer 设计举例（以小鼠mmu-miR-125b-5p为例）：<br>在miRNA Database中查找检测的miRNA序列，如下图所示：<a href="http://www.mirbase.org/cgi-bin/mature.pl?mature_acc=MIMAT0000136" target="_blank" rel="external">miRNA Database</a></p>
<p><img src="https://i.imgur.com/a8j33ex.jpg" alt=""></p>
<p><strong>如果不确定5p或者3p哪一个有功能，要么都设计，要么参考Previous IDs并查阅文献</strong></p>
<p>则其Forward 检测引物可为：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Sequences</th>
</tr>
</thead>
<tbody>
<tr>
<td>miRNA 成熟序列</td>
<td>ucccugagacccuaacuuguga</td>
</tr>
<tr>
<td>上游引物序列</td>
<td>tccctgagaccctaacttgtga （Tm：58.8）</td>
</tr>
</tbody>
</table>
<p>通用序列是：5′-GCTGTCAACGATACGCTACGTAACG-3′，也就是下游引物序列，内参一般使用U6基因：</p>
<ul>
<li>U6-Control-F 5＇ -CTCGCTTCGGCAGCACA-3＇</li>
<li>U6-Control-R 5＇ -AACGCTTCACGAATTTGCGT-3＇</li>
</ul>
<p><strong>最后，需要检测下引物对的几个参数</strong></p>
<p>NCBI 的<a href="https://www.ncbi.nlm.nih.gov/tools/primer-blast/" target="_blank" rel="external">Primer-BLAST</a>工具</p>
<p>在Primer Parameters 中分别输入上下游引物，在Primer Pair Specificity Checking Parameters 的Database 中选择相应模板类型（这里我选择Refseq mRNA)，将Organism 的物种改成Mus (taxid:10088)，即小鼠。然后点击左下角的Get Primers就可以得到比对结果。</p>
<ul>
<li>结果中主要看看是否有目的基因以外的基因出现，如果其它的基因也可以扩增出来，那说明引物特异性不好，可将引物返回我们再重新设计</li>
<li>如果出现的非目的条带和目的条带大小相差较大，可忽略不计，因为PCR扩增程序中延伸时间的限制，这种非目的条带扩增不出来。</li>
<li>另外，有些非目的条带和引物之间有四五个碱基不能互补配对，一般是扩增不出来的，尤其是这种不能互补的碱基在引物的3’端时，扩增不出的可能性更大。</li>
</ul>
<p><img src="https://i.imgur.com/c9BYFJe.jpg" alt=""></p>
<ol>
<li>Tm 融链温度 这个最关键，主要还是看这个，内参基因U6的Tm值为60，所以设计的上游引物也尽量在这个温度左右。通用引物做一些优化后为GCTGTCAACGATACGCTACCTA(去掉右端的剩下22个碱基，保持与大多成熟miRNA长度一致，然后将右端第三位的G改为C，降低通用引物的Self complementarity)。</li>
</ol>
<p><img src="https://i.imgur.com/Q6Fm06U.png" alt=""></p>
<p><strong>设计过程中，通过对上游引物5’端加1-3个GC碱基或者对上游引物3’端去除几个碱基使上游引物Tm值也在60左右即可！！！</strong></p>
<ol>
<li>GC%值 这个标准的话是45-50左右，但是主要还是服从于调整Tm值。</li>
<li>Self complementarity 贴吧里说的是越低越好，我有一条引物的值为9，打算让生工重新设计，但是生工的MM说了，miRNA他的要求跟别的普通的要求不一样，好吧</li>
<li><strong>最重要的特异性扩增问题：miRNA是不用检测特异性的，可以直接使用的。</strong></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="https://wenku.baidu.com/view/882b5c2b2f60ddccda38a087.html" target="_blank" rel="external">miRNA命名规范</a></p>
<p>（2）<a href="http://www.dxy.cn/bbs/topic/17332608" target="_blank" rel="external">miRNA用荧光定量PCR检测的流程以及汇总 [推荐]</a></p>
<p>（3）<a href="https://jingyan.baidu.com/article/b0b63dbf19baf74a483070c8.html" target="_blank" rel="external">如何在pubmed中设计QPCR引物？</a></p>
<p>（4）<a href="http://www.dxy.cn/bbs/thread/30911259#30911259" target="_blank" rel="external">MiRNA 引物设计与合成总结</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;在线设计miRNA的qPCR引物&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>批量生成与提交shell脚本</title>
    <link href="https:///AnJingwd.github.io/2018/01/21/%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%B8%8E%E6%8F%90%E4%BA%A4shell%E8%84%9A%E6%9C%AC/"/>
    <id>https:///AnJingwd.github.io/2018/01/21/批量生成与提交shell脚本/</id>
    <published>2018-01-21T02:15:40.000Z</published>
    <updated>2018-03-10T13:41:02.833Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">批量生成与提交shell脚本</blockquote>

<a id="more"></a>
<p>同一分析流程的shell脚本，通过替换样本参数，批量生成每个样本单独的piplines，从而实现批量提交，批量运行，在样本多的时候适用。</p>
<h1 id="批量生成shell脚本"><a href="#批量生成shell脚本" class="headerlink" title="批量生成shell脚本"></a>批量生成shell脚本</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#creat_multi_piplines.py</span></div><div class="line"></div><div class="line">  <span class="number">1</span> <span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">  <span class="number">2</span> <span class="comment">#!/home/wangdong/python/python27/bin/python2.7</span></div><div class="line">  <span class="number">3</span> </div><div class="line">  <span class="number">4</span> <span class="keyword">import</span> argparse,os,re,sys</div><div class="line">  <span class="number">5</span> </div><div class="line">  <span class="number">6</span> <span class="comment">#import parameters</span></div><div class="line">  <span class="number">7</span> parser = argparse.ArgumentParser(description=<span class="string">'manual to this script'</span>)</div><div class="line">  <span class="number">8</span> parser.add_argument(<span class="string">'--pipline_file'</span>, type=str, default=<span class="keyword">None</span>)</div><div class="line">  <span class="number">9</span> parser.add_argument(<span class="string">'--info_file'</span>, type=str, default=<span class="keyword">None</span>)</div><div class="line"> <span class="number">10</span> parser.add_argument(<span class="string">'--result_dir'</span>, type=str, default=<span class="keyword">None</span>)</div><div class="line"> <span class="number">11</span> args = parser.parse_args()</div><div class="line"> <span class="number">12</span> </div><div class="line"> <span class="number">13</span> </div><div class="line"> <span class="number">14</span> <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(args.result_dir):</div><div class="line"> <span class="number">15</span> &gt;---os.mkdir(args.result_dir)</div><div class="line"> <span class="number">16</span> </div><div class="line"> <span class="number">17</span> sample_pair = &#123;&#125;</div><div class="line"> <span class="number">18</span> <span class="keyword">with</span> open(args.info_file) <span class="keyword">as</span> f1:</div><div class="line"> <span class="number">19</span> &gt;---<span class="keyword">for</span> line <span class="keyword">in</span> f1:</div><div class="line"> 20 &gt;---&gt;---line = line.strip()</div><div class="line"> 21 &gt;---&gt;---mylist = line.split('\t')</div><div class="line"> 22 &gt;---&gt;---sample_pair[mylist[1]] = [mylist[0],mylist[2]]</div><div class="line"> <span class="number">23</span> </div><div class="line"> <span class="number">24</span> </div><div class="line"> <span class="number">25</span> <span class="keyword">for</span> key <span class="keyword">in</span> sample_pair:</div><div class="line"> <span class="number">26</span> &gt;---new_pip_file_name = <span class="string">"&#123;&#125;.sh"</span>.format(key)</div><div class="line"> <span class="number">27</span> &gt;---result_file = open(os.path.join(args.result_dir,new_pip_file_name),<span class="string">'w'</span>)</div><div class="line"> <span class="number">28</span> &gt;---<span class="keyword">with</span> open(args.pipline_file,<span class="string">'r'</span>) <span class="keyword">as</span> f2:</div><div class="line"> 29 &gt;---&gt;---for line in f2:</div><div class="line"> 30 &gt;---&gt;---&gt;---line = re.sub("MY_SAMPLE_ID_2017", str(sample_pair[key][0]), str(line))</div><div class="line"> 31 &gt;---&gt;---&gt;---line = re.sub("MY_SAMPLE_ID_2018", str(sample_pair[key][1]), str(line))</div><div class="line"> 32 &gt;---&gt;---&gt;---line = re.sub("MY_LIBRARY_ID", str(key), str(line))</div><div class="line"> 33 &gt;---&gt;---&gt;---result_file.write(line)</div><div class="line"> <span class="number">34</span> &gt;---result_file.close()</div><div class="line"> <span class="number">35</span> &gt;---chmod_commond = <span class="string">"chmod +x &#123;&#125;"</span>.format(os.path.join(args.result_dir, new_pip_file_name))</div><div class="line"> <span class="number">36</span> &gt;---os.system(chmod_commond)</div><div class="line"> <span class="number">37</span> </div><div class="line"> <span class="number">38</span> </div><div class="line"> <span class="number">39</span> </div><div class="line"> <span class="number">40</span> <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"> <span class="number">41</span> &gt;---print(<span class="string">'well done!'</span>)</div></pre></td></tr></table></figure>
<h1 id="批量提交shell脚本"><a href="#批量提交shell脚本" class="headerlink" title="批量提交shell脚本"></a>批量提交shell脚本</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#submit_multi_work.sh</span></div><div class="line"></div><div class="line">  1 <span class="comment">####################</span></div><div class="line">  2 <span class="comment">###function###</span></div><div class="line">  3 <span class="comment">#submit_multi_work</span></div><div class="line">  4 <span class="comment">####data####</span></div><div class="line">  5 <span class="comment">#20180121</span></div><div class="line">  6 <span class="comment">####use#####</span></div><div class="line">  7 <span class="built_in">echo</span> <span class="string">"usage: ./submit_multi_work.sh tasks_list.txt "</span></div><div class="line">  8                                              </div><div class="line">  9 <span class="comment">####################           </span></div><div class="line"> 10 <span class="comment">#!/bin/bash                       </span></div><div class="line"> 11 <span class="built_in">set</span> -u                           </div><div class="line"> 12 <span class="built_in">set</span> -e    </div><div class="line"> 13 <span class="built_in">set</span> -o pipefail</div><div class="line"> 14           </div><div class="line"> 15 <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">""</span> ] ; <span class="keyword">then</span></div><div class="line"> 16 &gt;---<span class="built_in">echo</span> <span class="string">"Bad command. No tasklist file been appointed. Right format: <span class="variable">$0</span> tasks_list.txt"</span></div><div class="line"> 17 &gt;---<span class="built_in">exit</span> 1</div><div class="line"> 18 <span class="keyword">fi</span></div><div class="line"> 19 tasks_num=`cat <span class="variable">$1</span>|wc -l`</div><div class="line"> 20 <span class="built_in">echo</span> <span class="string">"total tasks founded:<span class="variable">$tasks_num</span>"</span></div><div class="line"> 21 <span class="built_in">echo</span> <span class="string">"Now begin running....."</span></div><div class="line"> 22 mix_tasks=6  <span class="comment">#set mix tasks to assign</span></div><div class="line"> 23 cat <span class="variable">$1</span>|<span class="keyword">while</span> <span class="built_in">read</span> line</div><div class="line"> 24 <span class="keyword">do</span></div><div class="line"> 25 &gt;---tasks=`ps -u wangdong |grep -w <span class="string">'sh'</span> | wc -l`</div><div class="line"> 26 &gt;---<span class="keyword">while</span> [ <span class="variable">$tasks</span> -gt <span class="variable">$mix_tasks</span> ]</div><div class="line"> 27 &gt;---&gt;---<span class="keyword">do</span></div><div class="line"> 28 &gt;---&gt;---sleep 20</div><div class="line"> 29 &gt;---&gt;---&gt;---<span class="built_in">echo</span> <span class="string">"task is running"</span></div><div class="line"> 30 &gt;---&gt;---&gt;---tasks=`ps -u wangdong |grep -w <span class="string">'sh'</span> | wc -l`</div><div class="line"> 31 &gt;---&gt;---<span class="keyword">done</span></div><div class="line"> 32 &gt;---<span class="variable">$line</span>  <span class="comment"># run the COMMOND in tasklist</span></div><div class="line"> 33 &gt;---<span class="built_in">echo</span> <span class="string">"running <span class="variable">$line</span>"</span>~~</div><div class="line"> 34 &gt;---sleep 5</div><div class="line"> 35 <span class="keyword">done</span>~~</div><div class="line"> 36 <span class="built_in">echo</span> <span class="string">"end."</span>~</div><div class="line"></div><div class="line"><span class="comment">#tasks_list.txt</span></div><div class="line"></div><div class="line">  1 nohup /home/wangdong/projects/project4/piplines/oi_capture_process_sh/oi_1.sh &gt; oi_1.logfile 2&gt;&amp;1 &amp;</div><div class="line">  2 nohup /home/wangdong/projects/project4/piplines/oi_capture_process_sh/oi_2.sh &gt; oi_2.logfile 2&gt;&amp;1 &amp;</div><div class="line">  3 nohup /home/wangdong/projects/project4/piplines/oi_capture_process_sh/oi_3.sh &gt; oi_3.logfile 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line"><span class="comment">#run the submit_multi_work.sh</span></div><div class="line"></div><div class="line">    ./submit_multi_work.sh tasks_list.txt &gt; batchRun.log &amp;</div><div class="line"></div><div class="line"><span class="comment">#simple commond </span></div><div class="line"></div><div class="line">    cat task_list.txt |<span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span> <span class="variable">$line</span>;<span class="keyword">done</span></div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>（1）<a href="http://www.genek.tv/article/25" target="_blank" rel="external">批量生成脚本的技巧</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;批量生成与提交shell脚本&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https:///AnJingwd.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https:///AnJingwd.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
